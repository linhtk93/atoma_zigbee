###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                19/Apr/2017  10:06:13
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x1407
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xHOLD_AUTO_START -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES
#        -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -D HAL_UART=TRUE -D HAL_LED=TRUE -D HAL_KEY=TRUE
#        -D ISR_KEYINTERRUPT -lC
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.lst
#    Object file        =  
#        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\zcl_samplelight.r51
#
###############################################################################

C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "zcl.h"
     77          #include "zcl_general.h"
     78          #include "zcl_ha.h"
     79          #include "zcl_ezmode.h"
     80          #include "zcl_diagnostic.h"
     81          
     82          #include "zcl_samplelight.h"
     83          
     84          #include "onboard.h"
     85          
     86          /* HAL */
     87          #include "hal_lcd.h"
     88          #include "hal_led.h"
     89          #include "hal_key.h"
     90          
     91          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     92                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     93          #include "zgp_translationtable.h"
     94            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     95              #define ZGP_AUTO_TT
     96            #endif
     97          #endif
     98          
     99          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    100          #include "math.h"
    101          #include "hal_timer.h"
    102          #endif
    103          
    104          #include "NLMEDE.h"
    105          
    106          /*********************************************************************
    107           * MACROS
    108           */
    109          
    110          /*********************************************************************
    111           * CONSTANTS
    112           */
    113          #if (defined HAL_BOARD_ZLIGHT)
    114          #define LEVEL_MAX                 0xFE
    115          #define LEVEL_MIN                 0x0
    116          #define GAMMA_VALUE               2
    117          #define PWM_FULL_DUTY_CYCLE       1000
    118          #elif (defined HAL_PWM)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       100
    123          #endif
    124          
    125          /*********************************************************************
    126           * TYPEDEFS
    127           */
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          
    136          /*********************************************************************
    137           * GLOBAL FUNCTIONS
    138           */
    139          
    140          /*********************************************************************
    141           * LOCAL VARIABLES
    142           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    144          
    145          #ifdef ZCL_EZMODE
    146          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    147          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    148          
    149          
    150          // register EZ-Mode with task information (timeout events, callback, etc...)
    151          static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
    152          {
    153            &zclSampleLight_TaskID,
    154            SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    155            SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    156            &zclSampleLightSeqNum,
    157            zclSampleLight_EZModeCB
    158          };
    159          
    160          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    161          uint16 bindingInClusters[] =
   \                     bindingInClusters:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for bindingInClusters>`
   \   000002                REQUIRE __INIT_XDATA_I
    162          {
    163            ZCL_CLUSTER_ID_GEN_ON_OFF
    164          #ifdef ZCL_LEVEL_CTRL
    165            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    166          #endif
    167          };
    168          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    169          
    170          #endif  // ZCL_EZMODE
    171          
    172          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    173          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    174          {
    175            SAMPLELIGHT_ENDPOINT,
    176            &zclSampleLight_TaskID,
    177            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    178            (afNetworkLatencyReq_t)0            // No Network Latency req
    179          };
    180          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    184          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    185          devStates_t zclSampleLight_NwkState = DEV_INIT;
   \                     zclSampleLight_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleLight_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    186          
    187          #if ZCL_LEVEL_CTRL
    188          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    189          uint8 zclSampleLight_NewLevel;        // new level when done moving
    190          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    191          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    192          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    193          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    194          #endif
    195          
    196          /*********************************************************************
    197           * LOCAL FUNCTIONS
    198           */
    199          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    200          static void zclSampleLight_BasicResetCB( void );
    201          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    202          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    203          static void zclSampleLight_OnOffCB( uint8 cmd );
    204          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    205          #ifdef ZCL_LEVEL_CTRL
    206          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    207          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    208          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    209          static void zclSampleLight_LevelControlStopCB( void );
    210          static void zclSampleLight_DefaultMove( void );
    211          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    212          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    213          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    214          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    215          static void zclSampleLight_AdjustLightLevel( void );
    216          #endif
    217          
    218          // app display functions
    219          static void zclSampleLight_LcdDisplayUpdate( void );
    220          #ifdef LCD_SUPPORTED
    221          static void zclSampleLight_LcdDisplayMainMode( void );
    222          static void zclSampleLight_LcdDisplayHelpMode( void );
    223          #endif
    224          static void zclSampleLight_DisplayLight( void );
    225          
    226          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    227          void zclSampleLight_UpdateLampLevel( uint8 level );
    228          #endif
    229          
    230          // Functions to process ZCL Foundation incoming Command/Response messages
    231          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    232          #ifdef ZCL_READ
    233          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    234          #endif
    235          #ifdef ZCL_WRITE
    236          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    237          #endif
    238          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    239          #ifdef ZCL_DISCOVER
    240          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    241          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    242          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    243          #endif
    244          
    245          /*********************************************************************
    246           * STATUS STRINGS
    247           */
    248          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    249          const char sDeviceName[]   = "  Sample Light";
   \                     sDeviceName:
   \   000000   20205361     DB "  Sample Light"
   \            6D706C65
   \            204C6967
   \            687400  

   \                                 In  segment XDATA_ROM_C, align 1
    250          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    251          const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
   \                     sSwLight:
   \   000000   5357313A     DB "SW1: ToggleLight"
   \            20546F67
   \            676C654C
   \            69676874
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    252          const char sSwEZMode[]     = "SW2: EZ-Mode";
   \                     sSwEZMode:
   \   000000   5357323A     DB "SW2: EZ-Mode"
   \            20455A2D
   \            4D6F6465
   \            00      

   \                                 In  segment XDATA_I, align 1, keep-with-next
    253          char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
   \                     sSwHelp:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sSwHelp>`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ROM_C, align 1
    254          const char sLightOn[]      = "    LIGHT ON ";
   \                     sLightOn:
   \   000000   20202020     DB "    LIGHT ON "
   \            4C494748
   \            54204F4E
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
    255          const char sLightOff[]     = "    LIGHT OFF";
   \                     sLightOff:
   \   000000   20202020     DB "    LIGHT OFF"
   \            4C494748
   \            54204F46
   \            4600    
    256           #if ZCL_LEVEL_CTRL
    257           char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
    258           #endif
    259          #endif
    260          
    261          /*********************************************************************
    262           * ZCL General Profile Callback table
    263           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    264          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 28
   \   00001C                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   00001C                REQUIRE __INIT_XDATA_I
    265          {
    266            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    267            zclSampleLight_IdentifyCB,              // Identify command
    268          #ifdef ZCL_EZMODE
    269            NULL,                                   // Identify EZ-Mode Invoke command
    270            NULL,                                   // Identify Update Commission State command
    271          #endif
    272            NULL,                                   // Identify Trigger Effect command
    273            zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
    274            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    275            NULL,                                   // On/Off cluster enhanced command Off with Effect
    276            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    277            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    278          #ifdef ZCL_LEVEL_CTRL
    279            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    280            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    281            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    282            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    283          #endif
    284          #ifdef ZCL_GROUPS
    285            NULL,                                   // Group Response commands
    286          #endif
    287          #ifdef ZCL_SCENES
    288            NULL,                                  // Scene Store Request command
    289            NULL,                                  // Scene Recall Request command
    290            NULL,                                  // Scene Response command
    291          #endif
    292          #ifdef ZCL_ALARMS
    293            NULL,                                  // Alarm (Response) commands
    294          #endif
    295          #ifdef SE_UK_EXT
    296            NULL,                                  // Get Event Log command
    297            NULL,                                  // Publish Event Log command
    298          #endif
    299            NULL,                                  // RSSI Location command
    300            NULL                                   // RSSI Location Response command
    301          };
    302          
    303          /*********************************************************************
    304           * @fn          zclSampleLight_Init
    305           *
    306           * @brief       Initialization function for the zclGeneral layer.
    307           *
    308           * @param       none
    309           *
    310           * @return      none
    311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    313          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    314            zclSampleLight_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000009   F0           MOVX    @DPTR,A
    315          
    316            // Set destination address to indirect
    317            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    318            zclSampleLight_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    319            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    320          
    321            // This app is part of the Home Automation Profile
    322            zclHA_Init( &zclSampleLight_SimpleDesc );
   \   000017                ; Setup parameters for call to function zclHA_Init
   \   000017   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   000019   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001B   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    323          
    324            // Register the ZCL General Cluster Library callback functions
    325            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001E   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000020   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000022   7908         MOV     R1,#0x8
   \   000024   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    326          
    327            // Register the application's attribute list
    328            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   000027                ; Setup parameters for call to function zcl_registerAttrList
   \   000027   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   000029   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002B   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   00002E   E4           CLR     A
   \   00002F   93           MOVC    A,@A+DPTR
   \   000030   FA           MOV     R2,A
   \   000031   7908         MOV     R1,#0x8
   \   000033   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    329          
    330            // Register the Application to receive the unprocessed Foundation command/response messages
    331            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000036                ; Setup parameters for call to function zcl_registerForMsg
   \   000036   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    332          
    333          #ifdef ZCL_DISCOVER
    334            // Register the application's command list
    335            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
    336          #endif
    337          
    338            // Register for all key events - This app will handle all key events
    339            RegisterForKeys( zclSampleLight_TaskID );
   \   00003E                ; Setup parameters for call to function RegisterForKeys
   \   00003E   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    340          
    341            // Register for a test endpoint
    342            afRegister( &sampleLight_TestEp );
   \   000046                ; Setup parameters for call to function afRegister
   \   000046   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000048   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   00004A   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    343          
    344          #ifdef ZCL_EZMODE
    345            // Register EZ-Mode
    346            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
    347          
    348            // Register with the ZDO to receive Match Descriptor Responses
    349            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
    350          #endif
    351          
    352          
    353          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    354            HalTimer1Init( 0 );
    355            halTimer1SetChannelDuty( WHITE_LED, 0 );
    356            halTimer1SetChannelDuty( RED_LED, 0 );
    357            halTimer1SetChannelDuty( BLUE_LED, 0 );
    358            halTimer1SetChannelDuty( GREEN_LED, 0 );
    359          
    360            // find if we are already on a network from NV_RESTORE
    361            uint8 state;
    362            NLME_GetRequest( nwkNwkState, 0, &state );
    363          
    364            if ( state < NWK_ENDDEVICE )
    365            {
    366              // Start EZMode on Start up to avoid button press
    367              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    368            }
    369          #if ZCL_LEVEL_CTRL
    370            zclSampleLight_DefaultMove();
    371          #endif
    372          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    373          
    374          #ifdef ZCL_DIAGNOSTIC
    375            // Register the application's callback function to read/write attribute data.
    376            // This is only required when the attribute data format is unknown to ZCL.
    377            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   00004D                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   00004D   7C00         MOV     R4,#0x0
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   000053   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000055   7908         MOV     R1,#0x8
   \   000057   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    378          
    379            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   00005A                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   00005A   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    380            {
    381              // Here the user could start the timer to save Diagnostics to NV
    382            }
    383          #endif
    384          
    385          #ifdef LCD_SUPPORTED
    386            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   00005D                ; Setup parameters for call to function HalLcdWriteString
   \   00005D   7903         MOV     R1,#0x3
   \   00005F   7A..         MOV     R2,#sDeviceName & 0xff
   \   000061   7B..         MOV     R3,#(sDeviceName >> 8) & 0xff
   \   000063   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    387          #endif  // LCD_SUPPORTED
    388          
    389          #ifdef ZGP_AUTO_TT
    390            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
    391          #endif
    392            
    393              
    394            //return light state in memory when start 
    395            if (osal_nv_item_init(ZCD_NV_LIGHT_STATE, 1, NULL) == SUCCESS)
   \   000066                ; Setup parameters for call to function osal_nv_item_init
   \   000066   E4           CLR     A
   \   000067   F5..         MOV     ?V0,A
   \   000069   F5..         MOV     ?V1,A
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7C01         MOV     R4,#0x1
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7A01         MOV     R2,#0x1
   \   000076   7B04         MOV     R3,#0x4
   \   000078   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080   E9           MOV     A,R1
   \   000081   703C         JNZ     ??zclSampleLight_Init_0
    396            {
    397               /* Already have LightState in NV, load it */
    398               if(osal_nv_read(ZCD_NV_LIGHT_STATE, 0, 1, &zclSampleLight_OnOff) == SUCCESS)
   \   000083                ; Setup parameters for call to function osal_nv_read
   \   000083   75....       MOV     ?V0,#zclSampleLight_OnOff & 0xff
   \   000086   75....       MOV     ?V1,#(zclSampleLight_OnOff >> 8) & 0xff
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   75..01       MOV     ?V0,#0x1
   \   000091   75..00       MOV     ?V1,#0x0
   \   000094   78..         MOV     R0,#?V0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7C00         MOV     R4,#0x0
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7A01         MOV     R2,#0x1
   \   00009F   7B04         MOV     R3,#0x4
   \   0000A1   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A9   E9           MOV     A,R1
   \   0000AA   7013         JNZ     ??zclSampleLight_Init_0
    399               {
    400                  if(zclSampleLight_OnOff==LIGHT_ON)
   \   0000AC   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   6401         XRL     A,#0x1
   \   0000B2   7004         JNZ     ??zclSampleLight_Init_1
    401                  {
    402                    HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //turn on relay
   \   0000B4                ; Setup parameters for call to function HalLedSet
   \   0000B4   7A01         MOV     R2,#0x1
   \   0000B6   8002         SJMP    ??zclSampleLight_Init_2
    403                  }
    404                  else 
    405                  {
    406                    HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );  //turn off relay
   \                     ??zclSampleLight_Init_1:
   \   0000B8                ; Setup parameters for call to function HalLedSet
   \   0000B8   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_Init_2:
   \   0000BA   7901         MOV     R1,#0x1
   \   0000BC   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    407                  }
    408               }
    409            }
    410          
    411          }
   \                     ??zclSampleLight_Init_0:
   \   0000BF                REQUIRE ?Subroutine0
   \   0000BF                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    412          
    413          /*********************************************************************
    414           * @fn          zclSample_event_loop
    415           *
    416           * @brief       Event Loop Processor for zclGeneral.
    417           *
    418           * @param       none
    419           *
    420           * @return      none
    421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    422          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    423          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    424            afIncomingMSGPacket_t *MSGpkt;
    425          
    426            (void)task_id;  // Intentionally unreferenced parameter
    427          
    428            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7047         JNZ     ??zclSampleLight_event_loop_0
    429            {
    430              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    431              {
    432                switch ( MSGpkt->hdr.event )
    433                {
    434          #ifdef ZCL_EZMODE
    435                  case ZDO_CB_MSG:
    436                    zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    437                    break;
    438          #endif
    439                  case ZCL_INCOMING_MSG:
    440                    // Incoming ZCL Foundation command/response messages
    441                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    442                    break;
    443          
    444                  case KEY_CHANGE:
    445                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    446                    break;
    447          
    448                  case ZDO_STATE_CHANGE:
    449                    zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
    450          
    451                    // now on the network
    452                    if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    453                         (zclSampleLight_NwkState == DEV_ROUTER)   ||
    454                         (zclSampleLight_NwkState == DEV_END_DEVICE) )
    455                    {
    456                      giLightScreenMode = LIGHT_MAINMODE;
    457                      zclSampleLight_LcdDisplayUpdate();
    458          #ifdef ZCL_EZMODE
    459                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    460          #endif // ZCL_EZMODE
    461                    }
    462                    break;
    463          
    464                  default:
    465                    break;
    466                }
    467          
    468                // Release the memory
    469                osal_msg_deallocate( (uint8 *)MSGpkt );
    470              }
    471          
    472              // return unprocessed events
    473              return (events ^ SYS_EVENT_MSG);
    474            }
    475          
    476            if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   4003         JC      $+5
   \   000017   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    477            {
    478              if ( zclSampleLight_IdentifyTime > 0 )
   \   00001A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   600C         JZ      ??zclSampleLight_event_loop_2
    479                zclSampleLight_IdentifyTime--;
   \   000021   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000024   E0           MOVX    A,@DPTR
   \   000025   24FF         ADD     A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   34FF         ADDC    A,#-0x1
   \   00002C   F0           MOVX    @DPTR,A
    480              zclSampleLight_ProcessIdentifyTimeChange();
   \                     ??zclSampleLight_event_loop_2:
   \   00002D                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   00002D   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    481          
    482              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000030   EE           MOV     A,R6
   \   000031   6401         XRL     A,#0x1
   \   000033   02....       LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
    483            }
   \                     ??zclSampleLight_event_loop_4:
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   6409         XRL     A,#0x9
   \   00003E   600A         JZ      ??zclSampleLight_event_loop_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6407         XRL     A,#0x7
   \   000043   6005         JZ      ??zclSampleLight_event_loop_5
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6406         XRL     A,#0x6
   \   000048   7008         JNZ     ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_5:
   \   00004A   90....       MOV     DPTR,#giLightScreenMode
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00004F   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
   \                     ??zclSampleLight_event_loop_6:
   \   000052                ; Setup parameters for call to function osal_msg_deallocate
   \   000052   AA..         MOV     R2,?V0
   \   000054   AB..         MOV     R3,?V1
   \   000056   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   000059                ; Setup parameters for call to function osal_msg_receive
   \   000059   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000061   8A..         MOV     ?V0,R2
   \   000063   8B..         MOV     ?V1,R3
   \   000065   EA           MOV     A,R2
   \   000066   45..         ORL     A,?V1
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??zclSampleLight_event_loop_7 & 0xFFFF
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   E0           MOVX    A,@DPTR
   \   000072   24CC         ADD     A,#-0x34
   \   000074   600A         JZ      ??zclSampleLight_event_loop_8
   \   000076   2474         ADD     A,#0x74
   \   000078   604D         JZ      ??zclSampleLight_event_loop_9
   \   00007A   24EF         ADD     A,#-0x11
   \   00007C   60B8         JZ      ??zclSampleLight_event_loop_4
   \   00007E   80D2         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_8:
   \   000080   EA           MOV     A,R2
   \   000081   2417         ADD     A,#0x17
   \   000083   F8           MOV     R0,A
   \   000084   E4           CLR     A
   \   000085   35..         ADDC    A,?V1
   \   000087   F9           MOV     R1,A
   \   000088   E8           MOV     A,R0
   \   000089   FA           MOV     R2,A
   \   00008A   E9           MOV     A,R1
   \   00008B   FB           MOV     R3,A
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   14           DEC     A
   \   000095   6011         JZ      ??zclSampleLight_event_loop_10
   \   000097   24FD         ADD     A,#-0x3
   \   000099   701A         JNZ     ??zclSampleLight_event_loop_11
   \   00009B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   E8           MOV     A,R0
   \   0000A1   C3           CLR     C
   \   0000A2   99           SUBB    A,R1
   \   0000A3   5010         JNC     ??zclSampleLight_event_loop_11
   \   0000A5   08           INC     R0
   \   0000A6   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSampleLight_event_loop_10:
   \   0000A8   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000AB   8001         SJMP    ??zclSampleLight_event_loop_12
   \                     ??zclSampleLight_event_loop_13:
   \   0000AD   08           INC     R0
   \                     ??zclSampleLight_event_loop_12:
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F9           MOV     R1,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   C3           CLR     C
   \   0000B2   99           SUBB    A,R1
   \   0000B3   40F8         JC      ??zclSampleLight_event_loop_13
   \                     ??zclSampleLight_event_loop_11:
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FA           MOV     R2,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   FB           MOV     R3,A
   \   0000BE   EA           MOV     A,R2
   \   0000BF   4B           ORL     A,R3
   \   0000C0   6090         JZ      ??zclSampleLight_event_loop_6
   \   0000C2                ; Setup parameters for call to function osal_mem_free
   \   0000C2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C5   808B         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_9:
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   A2E5         MOV     C,0xE0 /* A   */.5
   \   0000CD   5083         JNC     ??zclSampleLight_event_loop_6
   \   0000CF   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6007         JZ      ??zclSampleLight_event_loop_14
   \   0000D5   E4           CLR     A
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7                ; Setup parameters for call to function HalLedSet
   \   0000D7   FA           MOV     R2,A
   \   0000D8   7901         MOV     R1,#0x1
   \   0000DA   8005         SJMP    ??zclSampleLight_event_loop_15
   \                     ??zclSampleLight_event_loop_14:
   \   0000DC   7401         MOV     A,#0x1
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF                ; Setup parameters for call to function HalLedSet
   \   0000DF   FA           MOV     R2,A
   \   0000E0   F9           MOV     R1,A
   \                     ??zclSampleLight_event_loop_15:
   \   0000E1   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000E4                ; Setup parameters for call to function osal_nv_item_len
   \   0000E4   7A01         MOV     R2,#0x1
   \   0000E6   7B04         MOV     R3,#0x4
   \   0000E8   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000EB   8B..         MOV     ?V3,R3
   \   0000ED   EA           MOV     A,R2
   \   0000EE   45..         ORL     A,?V3
   \   0000F0   6026         JZ      ??zclSampleLight_event_loop_16
   \   0000F2                ; Setup parameters for call to function osal_nv_write
   \   0000F2   75....       MOV     ?V2,#zclSampleLight_OnOff & 0xff
   \   0000F5   75....       MOV     ?V3,#(zclSampleLight_OnOff >> 8) & 0xff
   \   0000F8   78..         MOV     R0,#?V2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   75..01       MOV     ?V2,#0x1
   \   000100   75..00       MOV     ?V3,#0x0
   \   000103   78..         MOV     R0,#?V2
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   7C00         MOV     R4,#0x0
   \   00010A   7D00         MOV     R5,#0x0
   \   00010C   7A01         MOV     R2,#0x1
   \   00010E   7B04         MOV     R3,#0x4
   \   000110   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000113   7404         MOV     A,#0x4
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclSampleLight_event_loop_16:
   \   000118   7408         MOV     A,#0x8
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   740F         MOV     A,#0xf
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   85..82       MOV     DPL,?XSP + 0
   \   000123   85..83       MOV     DPH,?XSP + 1
   \   000126   74FF         MOV     A,#-0x1
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00012B   7D00         MOV     R5,#0x0
   \   00012D   7C01         MOV     R4,#0x1
   \   00012F   F9           MOV     R1,A
   \   000130   AA..         MOV     R2,?XSP + 0
   \   000132   AB..         MOV     R3,?XSP + 1
   \   000134   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   000137   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \                     ??zclSampleLight_event_loop_7:
   \   00013A   EE           MOV     A,R6
   \   00013B   FA           MOV     R2,A
   \   00013C   EF           MOV     A,R7
   \   00013D   6480         XRL     A,#0x80
   \   00013F   8011         SJMP    ??zclSampleLight_event_loop_17
    484          
    485            if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   000141   5410         ANL     A,#0x10
   \   000143   6010         JZ      ??zclSampleLight_event_loop_18
    486            {
    487              giLightScreenMode = LIGHT_MAINMODE;
   \   000145   90....       MOV     DPTR,#giLightScreenMode
   \   000148   E4           CLR     A
   \   000149   F0           MOVX    @DPTR,A
    488              zclSampleLight_LcdDisplayUpdate();
   \   00014A                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00014A   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    489          
    490              return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
   \   00014D   EE           MOV     A,R6
   \   00014E   6410         XRL     A,#0x10
   \                     ??zclSampleLight_event_loop_3:
   \   000150   FA           MOV     R2,A
   \   000151   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_17:
   \   000152   FB           MOV     R3,A
   \   000153   8004         SJMP    ??zclSampleLight_event_loop_19
    491            }
    492          
    493          #ifdef ZCL_EZMODE
    494          #if (defined HAL_BOARD_ZLIGHT)
    495            // event to start EZMode on startup with a delay
    496            if ( events & SAMPLELIGHT_START_EZMODE_EVT )
    497            {
    498              // Invoke EZ-Mode
    499              zclEZMode_InvokeData_t ezModeData;
    500          
    501              // Invoke EZ-Mode
    502              ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    503              if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    504                   (zclSampleLight_NwkState == DEV_ROUTER)   ||
    505                   (zclSampleLight_NwkState == DEV_END_DEVICE) )
    506              {
    507                ezModeData.onNetwork = TRUE;      // node is already on the network
    508              }
    509              else
    510              {
    511                ezModeData.onNetwork = FALSE;     // node is not yet on the network
    512              }
    513              ezModeData.initiator = FALSE;          // OnOffLight is a target
    514              ezModeData.numActiveOutClusters = 0;
    515              ezModeData.pActiveOutClusterIDs = NULL;
    516              ezModeData.numActiveInClusters = 0;
    517              ezModeData.pActiveOutClusterIDs = NULL;
    518              zcl_InvokeEZMode( &ezModeData );
    519          
    520              return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
    521            }
    522          #endif // #if (defined HAL_BOARD_ZLIGHT)
    523          
    524            // going on to next state
    525            if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
    526            {
    527              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
    528              return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
    529            }
    530          
    531            // the overall EZMode timer expired, so we timed out
    532            if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
    533            {
    534              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
    535              return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
    536            }
    537          #endif // ZLC_EZMODE
    538          
    539          #ifdef ZCL_LEVEL_CTRL
    540            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    541            {
    542              zclSampleLight_AdjustLightLevel();
    543              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    544            }
    545          #endif
    546          
    547            // Discard unknown events
    548            return 0;
   \                     ??zclSampleLight_event_loop_18:
   \   000155   7A00         MOV     R2,#0x0
   \   000157   7B00         MOV     R3,#0x0
   \                     ??zclSampleLight_event_loop_19:
   \   000159   7409         MOV     A,#0x9
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015E   7F04         MOV     R7,#0x4
   \   000160   02....       LJMP    ?BANKED_LEAVE_XDATA
    549          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET
    550          
    551          /*********************************************************************
    552           * @fn      zclSampleLight_HandleKeys
    553           *
    554           * @brief   Handles all key events for this device.
    555           *
    556           * @param   shift - true if in shift/alt.
    557           * @param   keys - bit field for key events. Valid entries:
    558           *                 HAL_KEY_SW_5
    559           *                 HAL_KEY_SW_4
    560           *                 HAL_KEY_SW_2
    561           *                 HAL_KEY_SW_1
    562           *
    563           * @return  none
    564           */
    565          static void zclSampleLight_HandleKeys( byte shift, byte keys )
    566          {
    567            /*
    568            if ( keys & HAL_KEY_SW_1 )
    569            {
    570              giLightScreenMode = LIGHT_MAINMODE;
    571          
    572              // toggle local light immediately
    573              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
    574          #ifdef ZCL_LEVEL_CTRL
    575              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    576          #endif
    577            }
    578          
    579            if ( keys & HAL_KEY_SW_2 )
    580            {
    581          #if (defined HAL_BOARD_ZLIGHT)
    582          
    583              zclSampleLight_BasicResetCB();
    584          
    585          #else
    586          
    587              giLightScreenMode = LIGHT_MAINMODE;
    588          
    589          #ifdef ZCL_EZMODE
    590              {
    591                // Invoke EZ-Mode
    592                zclEZMode_InvokeData_t ezModeData;
    593          
    594                // Invoke EZ-Mode
    595                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    596                if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    597                    (zclSampleLight_NwkState == DEV_ROUTER)   ||
    598                      (zclSampleLight_NwkState == DEV_END_DEVICE) )
    599                {
    600                  ezModeData.onNetwork = TRUE;      // node is already on the network
    601                }
    602                else
    603                {
    604                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
    605                }
    606                ezModeData.initiator = FALSE;          // OnOffLight is a target
    607                ezModeData.numActiveOutClusters = 0;
    608                ezModeData.pActiveOutClusterIDs = NULL;
    609                ezModeData.numActiveInClusters = 0;
    610                ezModeData.pActiveOutClusterIDs = NULL;
    611                zcl_InvokeEZMode( &ezModeData );
    612              }
    613          
    614          #else // NOT EZ-Mode
    615              {
    616                zAddrType_t dstAddr;
    617                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    618          
    619                // Initiate an End Device Bind Request, this bind request will
    620                // only use a cluster list that is important to binding.
    621                dstAddr.addrMode = afAddr16Bit;
    622                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    623                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    624                                     SAMPLELIGHT_ENDPOINT,
    625                                     ZCL_HA_PROFILE_ID,
    626                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    627                                     0, NULL,   // No Outgoing clusters to bind
    628                                     TRUE );
    629              }
    630          #endif // ZCL_EZMODE
    631          #endif // HAL_BOARD_ZLIGHT
    632            }
    633          
    634            if ( keys & HAL_KEY_SW_3 )
    635            {
    636              NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
    637                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
    638            }
    639          
    640            if ( keys & HAL_KEY_SW_4 )
    641            {
    642              giLightScreenMode = LIGHT_MAINMODE;
    643          
    644              if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
    645                    ( zclSampleLight_NwkState == DEV_ROUTER ) )
    646              {
    647                zAddrType_t tmpAddr;
    648          
    649                tmpAddr.addrMode = Addr16Bit;
    650                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
    651          
    652                // toggle permit join
    653                gPermitDuration = gPermitDuration ? 0 : 0xff;
    654          
    655                // Trust Center significance is always true
    656                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
    657              }
    658            }
    659          
    660            // Shift F5 does a Basic Reset (factory defaults)
    661            if ( shift && ( keys & HAL_KEY_SW_5 ) )
    662            {
    663              zclSampleLight_BasicResetCB();
    664            }
    665            else if ( keys & HAL_KEY_SW_5 )
    666            {
    667              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
    668            }
    669            
    670            // update the display, including the light
    671            zclSampleLight_LcdDisplayUpdate();
    672            */
    673            
    674            if ( keys & HAL_KEY_SW_6 )
    675            {
    676              // toggle local light immediately
    677              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
    678              if(zclSampleLight_OnOff==LIGHT_ON)
    679              {
    680                //HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //turn on led1- muc tich cuc am
    681                HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //relay on
    682              }
    683              else 
    684              {
    685                //HalLedSet(HAL_LED_1, HAL_LED_MODE_ON );  //turn off led1
    686                HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //relay off
    687              }
    688              
    689              //update light state into NV memory
    690              if (osal_nv_item_len(ZCD_NV_LIGHT_STATE))
    691              {
    692                osal_nv_write(ZCD_NV_LIGHT_STATE, 0, 1, &zclSampleLight_OnOff);
    693              }
    694          
    695              /*
    696              zclReportCmd_t rptcmd; 
    697              rptcmd.numAttr = 1;
    698              rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
    699              rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
    700              rptcmd.attrList[0].attrData = (uint8*)&zclSampleLight_OnOff;
    701          
    702              // Set destination address to indirect
    703              zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    704              zclSampleLight_DstAddr.addr.shortAddr = 0;
    705              zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, false, 0 );
    706              //end update
    707              */
    708              
    709               // enable permit joining on all routers
    710              zAddrType_t dstAddr;
    711              dstAddr.addrMode = AddrBroadcast;
    712              dstAddr.addr.shortAddr = 0xffff;          
    713              ZDP_MgmtPermitJoinReq(&dstAddr, 0xFF, TRUE, FALSE);
    714            }
    715          }
    716          
    717          /*********************************************************************
    718           * @fn      zclSampleLight_LcdDisplayUpdate
    719           *
    720           * @brief   Called to update the LCD display.
    721           *
    722           * @param   none
    723           *
    724           * @return  none
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          void zclSampleLight_LcdDisplayUpdate( void )
   \                     zclSampleLight_LcdDisplayUpdate:
    727          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    728          #ifdef LCD_SUPPORTED
    729            if ( giLightScreenMode == LIGHT_HELPMODE )
   \   000004   90....       MOV     DPTR,#giLightScreenMode
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7014         JNZ     ??zclSampleLight_LcdDisplayUpdate_0
    730            {
    731              zclSampleLight_LcdDisplayHelpMode();
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   7A..         MOV     R2,#sSwLight & 0xff
   \   000010   7B..         MOV     R3,#(sSwLight >> 8) & 0xff
   \   000012   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7902         MOV     R1,#0x2
   \   000017   7A..         MOV     R2,#sSwEZMode & 0xff
   \   000019   7B..         MOV     R3,#(sSwEZMode >> 8) & 0xff
   \   00001B   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00001E                ; Setup parameters for call to function HalLcdWriteString
   \   00001E   802F         SJMP    ??zclSampleLight_LcdDisplayUpdate_1
    732            }
    733            else
    734            {
    735              zclSampleLight_LcdDisplayMainMode();
   \                     ??zclSampleLight_LcdDisplayUpdate_0:
   \   000020   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6409         XRL     A,#0x9
   \   000026   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_2
   \   000028                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000028   7900         MOV     R1,#0x0
   \   00002A   8010         SJMP    ??zclSampleLight_LcdDisplayUpdate_3
   \                     ??zclSampleLight_LcdDisplayUpdate_2:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6407         XRL     A,#0x7
   \   00002F   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_4
   \   000031                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000031   7901         MOV     R1,#0x1
   \   000033   8007         SJMP    ??zclSampleLight_LcdDisplayUpdate_3
   \                     ??zclSampleLight_LcdDisplayUpdate_4:
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6406         XRL     A,#0x6
   \   000038   7005         JNZ     ??zclSampleLight_LcdDisplayUpdate_5
   \   00003A                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00003A   7902         MOV     R1,#0x2
   \                     ??zclSampleLight_LcdDisplayUpdate_3:
   \   00003C   12....       LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
   \                     ??zclSampleLight_LcdDisplayUpdate_5:
   \   00003F   90....       MOV     DPTR,#gPermitDuration
   \   000042   E0           MOVX    A,@DPTR
   \   000043   90....       MOV     DPTR,#sSwHelp + 15
   \   000046   6004         JZ      ??zclSampleLight_LcdDisplayUpdate_6
   \   000048   742A         MOV     A,#0x2a
   \   00004A   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_7
   \                     ??zclSampleLight_LcdDisplayUpdate_6:
   \   00004C   7420         MOV     A,#0x20
   \                     ??zclSampleLight_LcdDisplayUpdate_7:
   \   00004E   F0           MOVX    @DPTR,A
   \                     ??zclSampleLight_LcdDisplayUpdate_1:
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7903         MOV     R1,#0x3
   \   000051   7A..         MOV     R2,#sSwHelp & 0xff
   \   000053   7B..         MOV     R3,#(sSwHelp >> 8) & 0xff
   \   000055   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    736            }
    737          #endif
    738          
    739            zclSampleLight_DisplayLight();
   \   000058   90....       MOV     DPTR,#giLightScreenMode
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   7015         JNZ     ??zclSampleLight_LcdDisplayUpdate_8
   \   00005E   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000061   E0           MOVX    A,@DPTR
   \   000062   7902         MOV     R1,#0x2
   \   000064   6006         JZ      ??zclSampleLight_LcdDisplayUpdate_9
   \   000066                ; Setup parameters for call to function HalLcdWriteString
   \   000066   7A..         MOV     R2,#sLightOn & 0xff
   \   000068   7B..         MOV     R3,#(sLightOn >> 8) & 0xff
   \   00006A   8004         SJMP    ??zclSampleLight_LcdDisplayUpdate_10
   \                     ??zclSampleLight_LcdDisplayUpdate_9:
   \   00006C                ; Setup parameters for call to function HalLcdWriteString
   \   00006C   7A..         MOV     R2,#sLightOff & 0xff
   \   00006E   7B..         MOV     R3,#(sLightOff >> 8) & 0xff
   \                     ??zclSampleLight_LcdDisplayUpdate_10:
   \   000070   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    740          }
   \                     ??zclSampleLight_LcdDisplayUpdate_8:
   \   000073   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    741          
    742          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    743          /*********************************************************************
    744           * @fn      zclSampleLight_UpdateLampLevel
    745           *
    746           * @brief   Update lamp level output with gamma compensation
    747           *
    748           * @param   level
    749           *
    750           * @return  none
    751           */
    752          void zclSampleLight_UpdateLampLevel( uint8 level )
    753          
    754          {
    755            uint16 gammaCorrectedLevel;
    756          
    757            // gamma correct the level
    758            gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
    759          
    760            halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
    761          }
    762          #endif
    763          
    764          /*********************************************************************
    765           * @fn      zclSampleLight_DisplayLight
    766           *
    767           * @brief   Displays current state of light on LED and also on main display if supported.
    768           *
    769           * @param   none
    770           *
    771           * @return  none
    772           */
    773          static void zclSampleLight_DisplayLight( void )
    774          {
    775          //  // set the LED1 based on light (on or off)
    776          //  if ( zclSampleLight_OnOff == LIGHT_ON )
    777          //  {
    778          //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    779          //  }
    780          //  else
    781          //  {
    782          //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    783          //  }
    784          
    785          #ifdef LCD_SUPPORTED
    786            if (giLightScreenMode == LIGHT_MAINMODE)
    787            {
    788          #ifdef ZCL_LEVEL_CTRL
    789              // display current light level
    790              if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    791                   ( zclSampleLight_OnOff == LIGHT_OFF ) )
    792              {
    793                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    794              }
    795              else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    796                        ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
    797                         ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    798                           ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
    799              {
    800                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    801              }
    802              else    // "    LEVEL ###"
    803              {
    804                zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
    805                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    806              }
    807          #else
    808              if ( zclSampleLight_OnOff )
    809              {
    810                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    811              }
    812              else
    813              {
    814                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    815              }
    816          #endif // ZCL_LEVEL_CTRL
    817            }
    818          #endif // LCD_SUPPORTED
    819          }
    820          
    821          #ifdef LCD_SUPPORTED
    822          /*********************************************************************
    823           * @fn      zclSampleLight_LcdDisplayMainMode
    824           *
    825           * @brief   Called to display the main screen on the LCD.
    826           *
    827           * @param   none
    828           *
    829           * @return  none
    830           */
    831          static void zclSampleLight_LcdDisplayMainMode( void )
    832          {
    833            // display line 1 to indicate NWK status
    834            if ( zclSampleLight_NwkState == DEV_ZB_COORD )
    835            {
    836              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
    837            }
    838            else if ( zclSampleLight_NwkState == DEV_ROUTER )
    839            {
    840              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
    841            }
    842            else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
    843            {
    844              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
    845            }
    846          
    847            // end of line 3 displays permit join status (*)
    848            if ( gPermitDuration )
    849            {
    850              sSwHelp[15] = '*';
    851            }
    852            else
    853            {
    854              sSwHelp[15] = ' ';
    855            }
    856            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    857          }
    858          
    859          /*********************************************************************
    860           * @fn      zclSampleLight_LcdDisplayHelpMode
    861           *
    862           * @brief   Called to display the SW options on the LCD.
    863           *
    864           * @param   none
    865           *
    866           * @return  none
    867           */
    868          static void zclSampleLight_LcdDisplayHelpMode( void )
    869          {
    870            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
    871            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
    872            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    873          }
    874          #endif  // LCD_SUPPORTED
    875          
    876          /*********************************************************************
    877           * @fn      zclSampleLight_ProcessIdentifyTimeChange
    878           *
    879           * @brief   Called to process any change to the IdentifyTime attribute.
    880           *
    881           * @param   none
    882           *
    883           * @return  none
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          static void zclSampleLight_ProcessIdentifyTimeChange( void )
   \                     zclSampleLight_ProcessIdentifyTimeChange:
    886          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    887            if ( zclSampleLight_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6026         JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
    888            {
    889              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    890              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000022                ; Setup parameters for call to function HalLedBlink
   \   000022   7CE8         MOV     R4,#-0x18
   \   000024   7D03         MOV     R5,#0x3
   \   000026   7B05         MOV     R3,#0x5
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002F   800C         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
    891            }
    892            else
    893            {
    894          #ifdef ZCL_EZMODE
    895              if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
    896              {
    897                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
    898              }
    899              else
    900              {
    901                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    902              }
    903          #endif
    904          
    905              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_0:
   \   000031                ; Setup parameters for call to function osal_stop_timerEx
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7B00         MOV     R3,#0x0
   \   000035   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    906            }
    907          }
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_1:
   \   00003D   80..         SJMP    ?Subroutine1
    908          
    909          /*********************************************************************
    910           * @fn      zclSampleLight_BasicResetCB
    911           *
    912           * @brief   Callback from the ZCL General Cluster Library
    913           *          to set all the Basic Cluster attributes to default values.
    914           *
    915           * @param   none
    916           *
    917           * @return  none
    918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    919          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    920          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    921            NLME_LeaveReq_t leaveReq;
    922            // Set every field to 0
    923            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    924          
    925            // This will enable the device to rejoin the network after reset.
    926            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    927          
    928            // Set the NV startup option to force a "new" join.
    929            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    930          
    931            // Leave the network, and reset afterwards
    932            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclSampleLight_BasicResetCB_0
    933            {
    934              // Couldn't send out leave; prepare to reset anyway
    935              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    936            }
    937          }
   \                     ??zclSampleLight_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039                REQUIRE ?Subroutine1
   \   000039                ; // Fall through to label ?Subroutine1
    938          
    939          /*********************************************************************
    940           * @fn      zclSampleLight_IdentifyCB
    941           *
    942           * @brief   Callback from the ZCL General Cluster Library when
    943           *          it received an Identity Command for this application.
    944           *
    945           * @param   srcAddr - source address and endpoint of the response message
    946           * @param   identifyTime - the number of seconds to identify yourself
    947           *
    948           * @return  none
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleLight_IdentifyCB:
    951          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    952            zclSampleLight_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    953            zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    954          }
   \   000018   80..         SJMP    ?Subroutine1
    955          
    956          /*********************************************************************
    957           * @fn      zclSampleLight_IdentifyQueryRspCB
    958           *
    959           * @brief   Callback from the ZCL General Cluster Library when
    960           *          it received an Identity Query Response Command for this application.
    961           *
    962           * @param   srcAddr - requestor's address
    963           * @param   timeout - number of seconds to identify yourself (valid for query response)
    964           *
    965           * @return  none
    966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    967          static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleLight_IdentifyQueryRspCB:
    968          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    969            (void)pRsp;
    970          #ifdef ZCL_EZMODE
    971            {
    972              zclEZMode_ActionData_t data;
    973              data.pIdentifyQueryRsp = pRsp;
    974              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
    975            }
    976          #endif
    977          }
   \   000000   02....       LJMP    ?BRET
    978          
    979          /*********************************************************************
    980           * @fn      zclSampleLight_OnOffCB
    981           *
    982           * @brief   Callback from the ZCL General Cluster Library when
    983           *          it received an On/Off Command for this application.
    984           *
    985           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    986           *
    987           * @return  none
    988           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    989          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    990          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    991            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
    992          
    993            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000017   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   00001A   E8           MOV     A,R0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E9           MOV     A,R1
   \   00001E   F0           MOVX    @DPTR,A
    994          
    995          
    996            // Turn on the light
    997            if ( cmd == COMMAND_ON )
   \   00001F   7401         MOV     A,#0x1
   \   000021   6E           XRL     A,R6
   \   000022   700A         JNZ     ??zclSampleLight_OnOffCB_0
    998            {
    999              zclSampleLight_OnOff = LIGHT_ON;
   \   000024   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000027   7401         MOV     A,#0x1
   \   000029   F0           MOVX    @DPTR,A
   1000              //HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //turn on led1- muc tich cuc am
   1001              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //turn on relay
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   FA           MOV     R2,A
   \   00002B   F9           MOV     R1,A
   \   00002C   800B         SJMP    ??zclSampleLight_OnOffCB_1
   1002            }
   1003            // Turn off the light
   1004            else if ( cmd == COMMAND_OFF )
   \                     ??zclSampleLight_OnOffCB_0:
   \   00002E   EE           MOV     A,R6
   \   00002F   700D         JNZ     ??zclSampleLight_OnOffCB_2
   1005            {
   1006              zclSampleLight_OnOff = LIGHT_OFF;
   \   000031   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   1007              //HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //turn off led1
   1008              HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //turn off relay
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   FA           MOV     R2,A
   \   000037   7901         MOV     R1,#0x1
   \                     ??zclSampleLight_OnOffCB_1:
   \   000039   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003C   8011         SJMP    ??zclSampleLight_OnOffCB_3
   1009            }
   1010            // Toggle the light
   1011            else if ( cmd == COMMAND_TOGGLE )
   \                     ??zclSampleLight_OnOffCB_2:
   \   00003E   7402         MOV     A,#0x2
   \   000040   6E           XRL     A,R6
   \   000041   700C         JNZ     ??zclSampleLight_OnOffCB_3
   1012            {
   1013              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   000043   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000046   E0           MOVX    A,@DPTR
   \   000047   7004         JNZ     ??zclSampleLight_OnOffCB_4
   1014              {
   1015                zclSampleLight_OnOff = LIGHT_ON;
   \   000049   7401         MOV     A,#0x1
   \   00004B   8001         SJMP    ??zclSampleLight_OnOffCB_5
   1016              }
   1017              else
   1018              {
   1019                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_4:
   \   00004D   E4           CLR     A
   \                     ??zclSampleLight_OnOffCB_5:
   \   00004E   F0           MOVX    @DPTR,A
   1020              }
   1021            }
   1022            
   1023            //update light state into NV memory
   1024            if (osal_nv_item_len(ZCD_NV_LIGHT_STATE))
   \                     ??zclSampleLight_OnOffCB_3:
   \   00004F                ; Setup parameters for call to function osal_nv_item_len
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   7B04         MOV     R3,#0x4
   \   000053   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000056   8B..         MOV     ?V1,R3
   \   000058   EA           MOV     A,R2
   \   000059   45..         ORL     A,?V1
   \   00005B   6026         JZ      ??zclSampleLight_OnOffCB_6
   1025            {
   1026              osal_nv_write(ZCD_NV_LIGHT_STATE, 0, 1, &zclSampleLight_OnOff);
   \   00005D                ; Setup parameters for call to function osal_nv_write
   \   00005D   75....       MOV     ?V0,#zclSampleLight_OnOff & 0xff
   \   000060   75....       MOV     ?V1,#(zclSampleLight_OnOff >> 8) & 0xff
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..01       MOV     ?V0,#0x1
   \   00006B   75..00       MOV     ?V1,#0x0
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C00         MOV     R4,#0x0
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7A01         MOV     R2,#0x1
   \   000079   7B04         MOV     R3,#0x4
   \   00007B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1027            }
   1028            
   1029          #if ZCL_LEVEL_CTRL
   1030            zclSampleLight_DefaultMove( );
   1031          #endif
   1032            
   1033          //  //upate 9/12/2016
   1034          //  zclReportCmd_t rptcmd; 
   1035          //  rptcmd.numAttr = 1;
   1036          //  rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
   1037          //  rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
   1038          //  rptcmd.attrList[0].attrData = (uint8*)&zclSampleLight_OnOff;
   1039          //
   1040          //  // Set destination address to indirect
   1041          //  zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   1042          //  zclSampleLight_DstAddr.addr.shortAddr = 0;
   1043          //  zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, false, 0 );
   1044          //  //end update
   1045            
   1046            // update the display
   1047            //zclSampleLight_LcdDisplayUpdate( );
   1048          }
   \                     ??zclSampleLight_OnOffCB_6:
   \   000083   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingInClusters>`:
   \   000000   0600         DW 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   08           DB 8
   \   000001   ....         DW zclSampleLight_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sSwHelp>`:
   \   000000   5357353A     DB "SW5: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleLight_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   ....         DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
   \   000008   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessIdentifyTimeChange::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB
   1049          
   1050          #ifdef ZCL_LEVEL_CTRL
   1051          /*********************************************************************
   1052           * @fn      zclSampleLight_TimeRateHelper
   1053           *
   1054           * @brief   Calculate time based on rate, and startup level state machine
   1055           *
   1056           * @param   newLevel - new level for current level
   1057           *
   1058           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
   1059           */
   1060          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
   1061          {
   1062            uint32 diff;
   1063            uint32 newLevel32;
   1064          
   1065            // remember current and new level
   1066            zclSampleLight_NewLevel = newLevel;
   1067            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
   1068          
   1069            // calculate diff
   1070            newLevel32 = (uint32)1000 * newLevel;
   1071            if ( zclSampleLight_LevelCurrentLevel > newLevel )
   1072            {
   1073              diff = zclSampleLight_CurrentLevel32 - newLevel32;
   1074              zclSampleLight_NewLevelUp = FALSE;  // moving down
   1075            }
   1076            else
   1077            {
   1078              diff = newLevel32 - zclSampleLight_CurrentLevel32;
   1079              zclSampleLight_NewLevelUp = TRUE;   // moving up
   1080            }
   1081          
   1082            return ( diff );
   1083          }
   1084          
   1085          /*********************************************************************
   1086           * @fn      zclSampleLight_MoveBasedOnRate
   1087           *
   1088           * @brief   Calculate time based on rate, and startup level state machine
   1089           *
   1090           * @param   newLevel - new level for current level
   1091           * @param   rate16   - fixed point rate (e.g. 16.123)
   1092           *
   1093           * @return  none
   1094           */
   1095          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
   1096          {
   1097            uint32 diff;
   1098          
   1099            // determine how much time (in 10ths of seconds) based on the difference and rate
   1100            zclSampleLight_Rate32 = rate;
   1101            diff = zclSampleLight_TimeRateHelper( newLevel );
   1102            zclSampleLight_LevelRemainingTime = diff / rate;
   1103            if ( !zclSampleLight_LevelRemainingTime )
   1104            {
   1105              zclSampleLight_LevelRemainingTime = 1;
   1106            }
   1107          
   1108            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1109          }
   1110          
   1111          /*********************************************************************
   1112           * @fn      zclSampleLight_MoveBasedOnTime
   1113           *
   1114           * @brief   Calculate rate based on time, and startup level state machine
   1115           *
   1116           * @param   newLevel  - new level for current level
   1117           * @param   time      - in 10ths of seconds
   1118           *
   1119           * @return  none
   1120           */
   1121          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   1122          {
   1123            uint16 diff;
   1124          
   1125            // determine rate (in units) based on difference and time
   1126            diff = zclSampleLight_TimeRateHelper( newLevel );
   1127            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   1128            zclSampleLight_Rate32 = diff / time;
   1129          
   1130            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1131          }
   1132          
   1133          /*********************************************************************
   1134           * @fn      zclSampleLight_GetTime
   1135           *
   1136           * @brief   Determine amount of time that MoveXXX will take to complete.
   1137           *
   1138           * @param   level = new level to move to
   1139           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
   1140           *
   1141           * @return  none
   1142           */
   1143          static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
   1144          {
   1145            // there is a hiearchy of the amount of time to use for transistioning
   1146            // check each one in turn. If none of defaults are set, then use fastest
   1147            // time possible.
   1148            if ( time == 0xFFFF )
   1149            {
   1150              // use On or Off Transition Time if set (not 0xffff)
   1151              if ( zclSampleLight_OnOff == LIGHT_ON )
   1152              {
   1153                time = zclSampleLight_LevelOffTransitionTime;
   1154              }
   1155              else
   1156              {
   1157                time = zclSampleLight_LevelOnTransitionTime;
   1158              }
   1159          
   1160              // else use OnOffTransitionTime if set (not 0xffff)
   1161              if ( time == 0xFFFF )
   1162              {
   1163                time = zclSampleLight_LevelOnOffTransitionTime;
   1164              }
   1165          
   1166              // else as fast as possible
   1167              if ( time == 0xFFFF )
   1168              {
   1169                time = 1;
   1170              }
   1171            }
   1172          
   1173            if ( !time )
   1174            {
   1175              time = 1; // as fast as possible
   1176            }
   1177          
   1178            return ( time );
   1179          }
   1180          
   1181          /*********************************************************************
   1182           * @fn      zclSampleLight_DefaultMove
   1183           *
   1184           * @brief   We were turned on/off. Use default time to move to on or off.
   1185           *
   1186           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
   1187           *
   1188           * @return  none
   1189           */
   1190          static void zclSampleLight_DefaultMove( void )
   1191          {
   1192            uint8  newLevel;
   1193            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
   1194            uint16 time;
   1195          
   1196            // if moving to on position, move to on level
   1197            if ( zclSampleLight_OnOff )
   1198            {
   1199              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1200              {
   1201                // The last Level (before going OFF) should be used)
   1202                newLevel = zclSampleLight_LevelLastLevel;
   1203              }
   1204              else
   1205              {
   1206                newLevel = zclSampleLight_LevelOnLevel;
   1207              }
   1208          
   1209              time = zclSampleLight_LevelOnTransitionTime;
   1210            }
   1211            else
   1212            {
   1213              newLevel = ATTR_LEVEL_MIN_LEVEL;
   1214          
   1215              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1216              {
   1217                // Save the current Level before going OFF to use it when the light turns ON
   1218                // it should be back to this level
   1219                zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   1220              }
   1221          
   1222              time = zclSampleLight_LevelOffTransitionTime;
   1223            }
   1224          
   1225            // else use OnOffTransitionTime if set (not 0xffff)
   1226            if ( time == 0xFFFF )
   1227            {
   1228              time = zclSampleLight_LevelOnOffTransitionTime;
   1229            }
   1230          
   1231            // else as fast as possible
   1232            if ( time == 0xFFFF )
   1233            {
   1234              time = 1;
   1235            }
   1236          
   1237            // calculate rate based on time (int 10ths) for full transition (1-254)
   1238            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
   1239          
   1240            // start up state machine.
   1241            zclSampleLight_WithOnOff = TRUE;
   1242            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1243          }
   1244          
   1245          /*********************************************************************
   1246           * @fn      zclSampleLight_AdjustLightLevel
   1247           *
   1248           * @brief   Called each 10th of a second while state machine running
   1249           *
   1250           * @param   none
   1251           *
   1252           * @return  none
   1253           */
   1254          static void zclSampleLight_AdjustLightLevel( void )
   1255          {
   1256            // one tick (10th of a second) less
   1257            if ( zclSampleLight_LevelRemainingTime )
   1258            {
   1259              --zclSampleLight_LevelRemainingTime;
   1260            }
   1261          
   1262            // no time left, done
   1263            if ( zclSampleLight_LevelRemainingTime == 0)
   1264            {
   1265              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   1266            }
   1267          
   1268            // still time left, keep increment/decrementing
   1269            else
   1270            {
   1271              if ( zclSampleLight_NewLevelUp )
   1272              {
   1273                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   1274              }
   1275              else
   1276              {
   1277                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   1278              }
   1279              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   1280            }
   1281          
   1282          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1283            zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
   1284          #endif
   1285          
   1286            // also affect on/off
   1287            if ( zclSampleLight_WithOnOff )
   1288            {
   1289              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   1290              {
   1291                zclSampleLight_OnOff = LIGHT_ON;
   1292          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1293                ENABLE_LAMP;
   1294          #endif
   1295              }
   1296              else
   1297              {
   1298                zclSampleLight_OnOff = LIGHT_OFF;
   1299          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1300                DISABLE_LAMP;
   1301          #endif
   1302              }
   1303            }
   1304          
   1305            // display light level as we go
   1306            zclSampleLight_DisplayLight( );
   1307          
   1308            // keep ticking away
   1309            if ( zclSampleLight_LevelRemainingTime )
   1310            {
   1311              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1312            }
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1317           *
   1318           * @brief   Callback from the ZCL General Cluster Library when
   1319           *          it received a LevelControlMoveToLevel Command for this application.
   1320           *
   1321           * @param   pCmd - ZigBee command parameters
   1322           *
   1323           * @return  none
   1324           */
   1325          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   1326          {
   1327            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1328            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   1329          }
   1330          
   1331          /*********************************************************************
   1332           * @fn      zclSampleLight_LevelControlMoveCB
   1333           *
   1334           * @brief   Callback from the ZCL General Cluster Library when
   1335           *          it received a LevelControlMove Command for this application.
   1336           *
   1337           * @param   pCmd - ZigBee command parameters
   1338           *
   1339           * @return  none
   1340           */
   1341          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   1342          {
   1343            uint8 newLevel;
   1344            uint32 rate;
   1345          
   1346            // convert rate from units per second to units per tick (10ths of seconds)
   1347            // and move at that right up or down
   1348            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1349          
   1350            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   1351            {
   1352              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   1353            }
   1354            else
   1355            {
   1356              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1357            }
   1358          
   1359            rate = (uint32)100 * pCmd->rate;
   1360            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1361          }
   1362          
   1363          /*********************************************************************
   1364           * @fn      zclSampleLight_LevelControlStepCB
   1365           *
   1366           * @brief   Callback from the ZCL General Cluster Library when
   1367           *          it received an On/Off Command for this application.
   1368           *
   1369           * @param   pCmd - ZigBee command parameters
   1370           *
   1371           * @return  none
   1372           */
   1373          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1374          {
   1375            uint8 newLevel;
   1376          
   1377            // determine new level, but don't exceed boundaries
   1378            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1379            {
   1380              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1381              {
   1382                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1383              }
   1384              else
   1385              {
   1386                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1387              }
   1388            }
   1389            else
   1390            {
   1391              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1392              {
   1393                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1394              }
   1395              else
   1396              {
   1397                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1398              }
   1399            }
   1400          
   1401            // move to the new level
   1402            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1403            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1404          }
   1405          
   1406          /*********************************************************************
   1407           * @fn      zclSampleLight_LevelControlStopCB
   1408           *
   1409           * @brief   Callback from the ZCL General Cluster Library when
   1410           *          it received an Level Control Stop Command for this application.
   1411           *
   1412           * @param   pCmd - ZigBee command parameters
   1413           *
   1414           * @return  none
   1415           */
   1416          static void zclSampleLight_LevelControlStopCB( void )
   1417          {
   1418            // stop immediately
   1419            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1420            zclSampleLight_LevelRemainingTime = 0;
   1421          }
   1422          #endif
   1423          
   1424          /******************************************************************************
   1425           *
   1426           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1427           *
   1428           *****************************************************************************/
   1429          
   1430          /*********************************************************************
   1431           * @fn      zclSampleLight_ProcessIncomingMsg
   1432           *
   1433           * @brief   Process ZCL Foundation incoming message
   1434           *
   1435           * @param   pInMsg - pointer to the received message
   1436           *
   1437           * @return  none
   1438           */
   1439          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1440          {
   1441            switch ( pInMsg->zclHdr.commandID )
   1442            {
   1443          #ifdef ZCL_READ
   1444              case ZCL_CMD_READ_RSP:
   1445                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1446                break;
   1447          #endif
   1448          #ifdef ZCL_WRITE
   1449              case ZCL_CMD_WRITE_RSP:
   1450                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1451                break;
   1452          #endif
   1453          #ifdef ZCL_REPORT
   1454              // Attribute Reporting implementation should be added here
   1455              case ZCL_CMD_CONFIG_REPORT:
   1456                // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
   1457                break;
   1458          
   1459              case ZCL_CMD_CONFIG_REPORT_RSP:
   1460                // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
   1461                break;
   1462          
   1463              case ZCL_CMD_READ_REPORT_CFG:
   1464                // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
   1465                break;
   1466          
   1467              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1468                // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
   1469                break;
   1470          
   1471              case ZCL_CMD_REPORT:
   1472                // zclSampleLight_ProcessInReportCmd( pInMsg );
   1473                break;
   1474          #endif
   1475              case ZCL_CMD_DEFAULT_RSP:
   1476                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1477                break;
   1478          #ifdef ZCL_DISCOVER
   1479              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1480                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1481                break;
   1482          
   1483              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1484                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1485                break;
   1486          
   1487              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1488                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1489                break;
   1490          
   1491              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1492                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1493                break;
   1494          #endif
   1495              default:
   1496                break;
   1497            }
   1498          
   1499            if ( pInMsg->attrCmd )
   1500              osal_mem_free( pInMsg->attrCmd );
   1501          }
   1502          
   1503          #ifdef ZCL_READ
   1504          /*********************************************************************
   1505           * @fn      zclSampleLight_ProcessInReadRspCmd
   1506           *
   1507           * @brief   Process the "Profile" Read Response Command
   1508           *
   1509           * @param   pInMsg - incoming message to process
   1510           *
   1511           * @return  none
   1512           */
   1513          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1514          {
   1515            zclReadRspCmd_t *readRspCmd;
   1516            uint8 i;
   1517          
   1518            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1519            for (i = 0; i < readRspCmd->numAttr; i++)
   1520            {
   1521              // Notify the originator of the results of the original read attributes
   1522              // attempt and, for each successfull request, the value of the requested
   1523              // attribute
   1524            }
   1525          
   1526            return ( TRUE );
   1527          }
   1528          #endif // ZCL_READ
   1529          
   1530          #ifdef ZCL_WRITE
   1531          /*********************************************************************
   1532           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1533           *
   1534           * @brief   Process the "Profile" Write Response Command
   1535           *
   1536           * @param   pInMsg - incoming message to process
   1537           *
   1538           * @return  none
   1539           */
   1540          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1541          {
   1542            zclWriteRspCmd_t *writeRspCmd;
   1543            uint8 i;
   1544          
   1545            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1546            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1547            {
   1548              // Notify the device of the results of the its original write attributes
   1549              // command.
   1550            }
   1551          
   1552            return ( TRUE );
   1553          }
   1554          #endif // ZCL_WRITE
   1555          
   1556          /*********************************************************************
   1557           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1558           *
   1559           * @brief   Process the "Profile" Default Response Command
   1560           *
   1561           * @param   pInMsg - incoming message to process
   1562           *
   1563           * @return  none
   1564           */
   1565          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1566          {
   1567            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1568          
   1569            // Device is notified of the Default Response command.
   1570            (void)pInMsg;
   1571          
   1572            return ( TRUE );
   1573          }
   1574          
   1575          #ifdef ZCL_DISCOVER
   1576          /*********************************************************************
   1577           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1578           *
   1579           * @brief   Process the Discover Commands Response Command
   1580           *
   1581           * @param   pInMsg - incoming message to process
   1582           *
   1583           * @return  none
   1584           */
   1585          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1586          {
   1587            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1588            uint8 i;
   1589          
   1590            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1591            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1592            {
   1593              // Device is notified of the result of its attribute discovery command.
   1594            }
   1595          
   1596            return ( TRUE );
   1597          }
   1598          
   1599          /*********************************************************************
   1600           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1601           *
   1602           * @brief   Process the "Profile" Discover Attributes Response Command
   1603           *
   1604           * @param   pInMsg - incoming message to process
   1605           *
   1606           * @return  none
   1607           */
   1608          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1609          {
   1610            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1611            uint8 i;
   1612          
   1613            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1614            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1615            {
   1616              // Device is notified of the result of its attribute discovery command.
   1617            }
   1618          
   1619            return ( TRUE );
   1620          }
   1621          
   1622          /*********************************************************************
   1623           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1624           *
   1625           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1626           *
   1627           * @param   pInMsg - incoming message to process
   1628           *
   1629           * @return  none
   1630           */
   1631          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1632          {
   1633            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1634            uint8 i;
   1635          
   1636            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1637            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1638            {
   1639              // Device is notified of the result of its attribute discovery command.
   1640            }
   1641          
   1642            return ( TRUE );
   1643          }
   1644          #endif // ZCL_DISCOVER
   1645          
   1646          #if ZCL_EZMODE
   1647          /*********************************************************************
   1648           * @fn      zclSampleLight_ProcessZDOMsgs
   1649           *
   1650           * @brief   Called when this node receives a ZDO/ZDP response.
   1651           *
   1652           * @param   none
   1653           *
   1654           * @return  status
   1655           */
   1656          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1657          {
   1658            zclEZMode_ActionData_t data;
   1659            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1660          
   1661            // Let EZ-Mode know of the Simple Descriptor Response
   1662            if ( pMsg->clusterID == Match_Desc_rsp )
   1663            {
   1664              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1665              data.pMatchDescRsp = pMatchDescRsp;
   1666              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1667              osal_mem_free( pMatchDescRsp );
   1668            }
   1669          }
   1670          
   1671          /*********************************************************************
   1672           * @fn      zclSampleLight_EZModeCB
   1673           *
   1674           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1675          *           going on during EZ-Mode steering/finding/binding.
   1676           *
   1677           * @param   state - an
   1678           *
   1679           * @return  none
   1680           */
   1681          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   1682          {
   1683          #ifdef LCD_SUPPORTED
   1684            char *pStr;
   1685            uint8 err;
   1686          #endif
   1687          
   1688            // time to go into identify mode
   1689            if ( state == EZMODE_STATE_IDENTIFYING )
   1690            {
   1691          #ifdef LCD_SUPPORTED
   1692              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   1693          #endif
   1694          
   1695              zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   1696              zclSampleLight_ProcessIdentifyTimeChange();
   1697            }
   1698          
   1699            // autoclosing, show what happened (success, cancelled, etc...)
   1700            if( state == EZMODE_STATE_AUTOCLOSE )
   1701            {
   1702          #ifdef LCD_SUPPORTED
   1703              pStr = NULL;
   1704              err = pData->sAutoClose.err;
   1705              if ( err == EZMODE_ERR_SUCCESS )
   1706              {
   1707                pStr = "EZMode: Success";
   1708              }
   1709              else if ( err == EZMODE_ERR_NOMATCH )
   1710              {
   1711                pStr = "EZMode: NoMatch"; // not a match made in heaven
   1712              }
   1713              if ( pStr )
   1714              {
   1715                if ( giLightScreenMode == LIGHT_MAINMODE )
   1716                {
   1717                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1718                }
   1719              }
   1720          #endif
   1721            }
   1722          
   1723            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1724            if( state == EZMODE_STATE_FINISH )
   1725            {
   1726              // turn off identify mode
   1727              zclSampleLight_IdentifyTime = 0;
   1728              zclSampleLight_ProcessIdentifyTimeChange();
   1729          
   1730          #ifdef LCD_SUPPORTED
   1731              // if successful, inform user which nwkaddr/ep we bound to
   1732              pStr = NULL;
   1733              err = pData->sFinish.err;
   1734              if( err == EZMODE_ERR_SUCCESS )
   1735              {
   1736                // already stated on autoclose
   1737              }
   1738              else if ( err == EZMODE_ERR_CANCELLED )
   1739              {
   1740                pStr = "EZMode: Cancel";
   1741              }
   1742              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   1743              {
   1744                pStr = "EZMode: BadParm";
   1745              }
   1746              else if ( err == EZMODE_ERR_TIMEDOUT )
   1747              {
   1748                pStr = "EZMode: TimeOut";
   1749              }
   1750              if ( pStr )
   1751              {
   1752                if ( giLightScreenMode == LIGHT_MAINMODE )
   1753                {
   1754                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1755                }
   1756              }
   1757          #endif
   1758              // show main UI screen 3 seconds after binding
   1759              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   1760            }
   1761          }
   1762          #endif // ZCL_EZMODE
   1763          
   1764          /****************************************************************************
   1765          ****************************************************************************/
   1766          
   1767          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      5   zclSampleLight_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      2      0   zclSampleLight_IdentifyCB
        2      0   -> zclSampleLight_ProcessIdentifyTimeChange
      0      0   zclSampleLight_IdentifyQueryRspCB
      0     14   zclSampleLight_Init
        0     10   -> HalLcdWriteString
        0     10   -> HalLedSet
        0     10   -> RegisterForKeys
        0     10   -> afRegister
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
        0     10   -> zclDiagnostic_InitStats
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclHA_Init
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
        0     10   -> zcl_registerReadWriteCB
      2     21   zclSampleLight_LcdDisplayUpdate
        2      0   -> HalLcdWriteString
        2      0   -> zclHA_LcdStatusLine1
      0     14   zclSampleLight_OnOffCB
        0     10   -> HalLedSet
        0     10   -> osal_nv_item_len
        0     14   -> osal_nv_write
        0     10   -> zcl_getRawAFMsg
      2     25   zclSampleLight_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0     25   zclSampleLight_event_loop
        0     21   -> HalLedSet
        0     21   -> ZDP_MgmtPermitJoinReq
        0     21   -> osal_mem_free
        0     21   -> osal_msg_deallocate
        0     21   -> osal_msg_receive
        0     21   -> osal_nv_item_len
        0     25   -> osal_nv_write
        0     21   -> zclSampleLight_LcdDisplayUpdate
        0     21   -> zclSampleLight_ProcessIdentifyTimeChange


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for bindingInClusters>
      17  ?<Initializer for sSwHelp>
       6  ?<Initializer for sampleLight_TestEp>
      28  ?<Initializer for zclSampleLight_CmdCallbacks>
       1  ?<Initializer for zclSampleLight_NwkState>
       6  ??Subroutine4_0
       5  ?Subroutine0
       7  ?Subroutine1
      16  ?Subroutine2
       3  ?Subroutine3
       4  __Constant_3e8
       2  bindingInClusters
       1  gPermitDuration
       1  giLightScreenMode
       2  sClearLine
      15  sDeviceName
      14  sLightOff
      14  sLightOn
      13  sSwEZMode
      17  sSwHelp
      17  sSwLight
       6  sampleLight_TestEp
       1  zclSampleLightSeqNum
      57  zclSampleLight_BasicResetCB
       6  zclSampleLight_BasicResetCB::?relay
      28  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
      26  zclSampleLight_IdentifyCB
       6  zclSampleLight_IdentifyCB::?relay
       3  zclSampleLight_IdentifyQueryRspCB
       6  zclSampleLight_IdentifyQueryRspCB::?relay
     191  zclSampleLight_Init
       6  zclSampleLight_Init::?relay
     117  zclSampleLight_LcdDisplayUpdate
       6  zclSampleLight_LcdDisplayUpdate::?relay
       1  zclSampleLight_NwkState
     134  zclSampleLight_OnOffCB
       6  zclSampleLight_OnOffCB::?relay
      63  zclSampleLight_ProcessIdentifyTimeChange
       6  zclSampleLight_ProcessIdentifyTimeChange::?relay
       1  zclSampleLight_TaskID
     355  zclSampleLight_event_loop
       6  zclSampleLight_event_loop::?relay

 
 983 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
  54 bytes in segment XDATA_I
  54 bytes in segment XDATA_ID
  79 bytes in segment XDATA_ROM_C
  16 bytes in segment XDATA_Z
 
 1 085 bytes of CODE  memory
    75 bytes of CONST memory (+ 4 bytes shared)
    70 bytes of XDATA memory

Errors: none
Warnings: none
