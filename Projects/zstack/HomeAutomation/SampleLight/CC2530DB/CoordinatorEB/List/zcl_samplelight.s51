///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               19/Apr/2017  10:06:13
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x1407
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xHOLD_AUTO_START -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
//        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES
//        -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
//        FEATURE_SYSTEM_STATS -D HAL_UART=TRUE -D HAL_LED=TRUE -D HAL_KEY=TRUE
//        -D ISR_KEYINTERRUPT -lC
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
//        -lA
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBLIC bindingInClusters
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sLightOff
        PUBLIC sLightOn
        PUBLIC sSwEZMode
        PUBLIC sSwHelp
        PUBLIC sSwLight
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 38>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 38>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Wiki\Desktop\Atoma_zigbee\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 /*********************************************************************
//  107  * MACROS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * CONSTANTS
//  112  */
//  113 #if (defined HAL_BOARD_ZLIGHT)
//  114 #define LEVEL_MAX                 0xFE
//  115 #define LEVEL_MIN                 0x0
//  116 #define GAMMA_VALUE               2
//  117 #define PWM_FULL_DUTY_CYCLE       1000
//  118 #elif (defined HAL_PWM)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       100
//  123 #endif
//  124 
//  125 /*********************************************************************
//  126  * TYPEDEFS
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 
//  135 
//  136 /*********************************************************************
//  137  * GLOBAL FUNCTIONS
//  138  */
//  139 
//  140 /*********************************************************************
//  141  * LOCAL VARIABLES
//  142  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 #ifdef ZCL_EZMODE
//  146 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  147 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  148 
//  149 
//  150 // register EZ-Mode with task information (timeout events, callback, etc...)
//  151 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
//  152 {
//  153   &zclSampleLight_TaskID,
//  154   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  155   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  156   &zclSampleLightSeqNum,
//  157   zclSampleLight_EZModeCB
//  158 };
//  159 
//  160 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  161 uint16 bindingInClusters[] =
bindingInClusters:
        DATA16
        DS 2
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  162 {
//  163   ZCL_CLUSTER_ID_GEN_ON_OFF
//  164 #ifdef ZCL_LEVEL_CTRL
//  165   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  166 #endif
//  167 };
//  168 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  169 
//  170 #endif  // ZCL_EZMODE
//  171 
//  172 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  173 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  174 {
//  175   SAMPLELIGHT_ENDPOINT,
//  176   &zclSampleLight_TaskID,
//  177   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  178   (afNetworkLatencyReq_t)0            // No Network Latency req
//  179 };
//  180 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  185 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  186 
//  187 #if ZCL_LEVEL_CTRL
//  188 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  189 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  190 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  191 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  192 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  193 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  194 #endif
//  195 
//  196 /*********************************************************************
//  197  * LOCAL FUNCTIONS
//  198  */
//  199 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  200 static void zclSampleLight_BasicResetCB( void );
//  201 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  202 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  203 static void zclSampleLight_OnOffCB( uint8 cmd );
//  204 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  205 #ifdef ZCL_LEVEL_CTRL
//  206 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  207 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  208 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  209 static void zclSampleLight_LevelControlStopCB( void );
//  210 static void zclSampleLight_DefaultMove( void );
//  211 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  212 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  213 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  214 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  215 static void zclSampleLight_AdjustLightLevel( void );
//  216 #endif
//  217 
//  218 // app display functions
//  219 static void zclSampleLight_LcdDisplayUpdate( void );
//  220 #ifdef LCD_SUPPORTED
//  221 static void zclSampleLight_LcdDisplayMainMode( void );
//  222 static void zclSampleLight_LcdDisplayHelpMode( void );
//  223 #endif
//  224 static void zclSampleLight_DisplayLight( void );
//  225 
//  226 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  227 void zclSampleLight_UpdateLampLevel( uint8 level );
//  228 #endif
//  229 
//  230 // Functions to process ZCL Foundation incoming Command/Response messages
//  231 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  232 #ifdef ZCL_READ
//  233 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  234 #endif
//  235 #ifdef ZCL_WRITE
//  236 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  237 #endif
//  238 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  239 #ifdef ZCL_DISCOVER
//  240 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  241 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  242 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  243 #endif
//  244 
//  245 /*********************************************************************
//  246  * STATUS STRINGS
//  247  */
//  248 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  249 const char sDeviceName[]   = "  Sample Light";
sDeviceName:
        DB "  Sample Light"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  250 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  251 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
sSwLight:
        DB "SW1: ToggleLight"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  252 const char sSwEZMode[]     = "SW2: EZ-Mode";
sSwEZMode:
        DB "SW2: EZ-Mode"

        RSEG XDATA_I:XDATA:NOROOT(0)
//  253 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
sSwHelp:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sSwHelp>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  254 const char sLightOn[]      = "    LIGHT ON ";
sLightOn:
        DB "    LIGHT ON "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  255 const char sLightOff[]     = "    LIGHT OFF";
sLightOff:
        DB "    LIGHT OFF"
//  256  #if ZCL_LEVEL_CTRL
//  257  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  258  #endif
//  259 #endif
//  260 
//  261 /*********************************************************************
//  262  * ZCL General Profile Callback table
//  263  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  264 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 28
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  265 {
//  266   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  267   zclSampleLight_IdentifyCB,              // Identify command
//  268 #ifdef ZCL_EZMODE
//  269   NULL,                                   // Identify EZ-Mode Invoke command
//  270   NULL,                                   // Identify Update Commission State command
//  271 #endif
//  272   NULL,                                   // Identify Trigger Effect command
//  273   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  274   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  275   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  276   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  277   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  278 #ifdef ZCL_LEVEL_CTRL
//  279   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  280   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  281   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  282   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  283 #endif
//  284 #ifdef ZCL_GROUPS
//  285   NULL,                                   // Group Response commands
//  286 #endif
//  287 #ifdef ZCL_SCENES
//  288   NULL,                                  // Scene Store Request command
//  289   NULL,                                  // Scene Recall Request command
//  290   NULL,                                  // Scene Response command
//  291 #endif
//  292 #ifdef ZCL_ALARMS
//  293   NULL,                                  // Alarm (Response) commands
//  294 #endif
//  295 #ifdef SE_UK_EXT
//  296   NULL,                                  // Get Event Log command
//  297   NULL,                                  // Publish Event Log command
//  298 #endif
//  299   NULL,                                  // RSSI Location command
//  300   NULL                                   // RSSI Location Response command
//  301 };
//  302 
//  303 /*********************************************************************
//  304  * @fn          zclSampleLight_Init
//  305  *
//  306  * @brief       Initialization function for the zclGeneral layer.
//  307  *
//  308  * @param       none
//  309  *
//  310  * @return      none
//  311  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  312 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  313 {
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//  314   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  315 
//  316   // Set destination address to indirect
//  317   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  318   zclSampleLight_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  319   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  320 
//  321   // This app is part of the Home Automation Profile
//  322   zclHA_Init( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  323 
//  324   // Register the ZCL General Cluster Library callback functions
//  325   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  326 
//  327   // Register the application's attribute list
//  328   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  329 
//  330   // Register the Application to receive the unprocessed Foundation command/response messages
//  331   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  332 
//  333 #ifdef ZCL_DISCOVER
//  334   // Register the application's command list
//  335   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  336 #endif
//  337 
//  338   // Register for all key events - This app will handle all key events
//  339   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  340 
//  341   // Register for a test endpoint
//  342   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  343 
//  344 #ifdef ZCL_EZMODE
//  345   // Register EZ-Mode
//  346   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
//  347 
//  348   // Register with the ZDO to receive Match Descriptor Responses
//  349   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
//  350 #endif
//  351 
//  352 
//  353 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  354   HalTimer1Init( 0 );
//  355   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  356   halTimer1SetChannelDuty( RED_LED, 0 );
//  357   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  358   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  359 
//  360   // find if we are already on a network from NV_RESTORE
//  361   uint8 state;
//  362   NLME_GetRequest( nwkNwkState, 0, &state );
//  363 
//  364   if ( state < NWK_ENDDEVICE )
//  365   {
//  366     // Start EZMode on Start up to avoid button press
//  367     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  368   }
//  369 #if ZCL_LEVEL_CTRL
//  370   zclSampleLight_DefaultMove();
//  371 #endif
//  372 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  373 
//  374 #ifdef ZCL_DIAGNOSTIC
//  375   // Register the application's callback function to read/write attribute data.
//  376   // This is only required when the attribute data format is unknown to ZCL.
//  377   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  378 
//  379   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  380   {
//  381     // Here the user could start the timer to save Diagnostics to NV
//  382   }
//  383 #endif
//  384 
//  385 #ifdef LCD_SUPPORTED
//  386   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sDeviceName & 0xff
        MOV     R3,#(sDeviceName >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  387 #endif  // LCD_SUPPORTED
//  388 
//  389 #ifdef ZGP_AUTO_TT
//  390   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
//  391 #endif
//  392   
//  393     
//  394   //return light state in memory when start 
//  395   if (osal_nv_item_init(ZCD_NV_LIGHT_STATE, 1, NULL) == SUCCESS)
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??zclSampleLight_Init_0
//  396   {
//  397      /* Already have LightState in NV, load it */
//  398      if(osal_nv_read(ZCD_NV_LIGHT_STATE, 0, 1, &zclSampleLight_OnOff) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zclSampleLight_OnOff & 0xff
        MOV     ?V1,#(zclSampleLight_OnOff >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??zclSampleLight_Init_0
//  399      {
//  400         if(zclSampleLight_OnOff==LIGHT_ON)
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_Init_1
//  401         {
//  402           HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //turn on relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_Init_2
//  403         }
//  404         else 
//  405         {
//  406           HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF );  //turn off relay
??zclSampleLight_Init_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_Init_2:
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  407         }
//  408      }
//  409   }
//  410 
//  411 }
??zclSampleLight_Init_0:
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  412 
//  413 /*********************************************************************
//  414  * @fn          zclSample_event_loop
//  415  *
//  416  * @brief       Event Loop Processor for zclGeneral.
//  417  *
//  418  * @param       none
//  419  *
//  420  * @return      none
//  421  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  422 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  423 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  424   afIncomingMSGPacket_t *MSGpkt;
//  425 
//  426   (void)task_id;  // Intentionally unreferenced parameter
//  427 
//  428   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  429   {
//  430     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  431     {
//  432       switch ( MSGpkt->hdr.event )
//  433       {
//  434 #ifdef ZCL_EZMODE
//  435         case ZDO_CB_MSG:
//  436           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  437           break;
//  438 #endif
//  439         case ZCL_INCOMING_MSG:
//  440           // Incoming ZCL Foundation command/response messages
//  441           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  442           break;
//  443 
//  444         case KEY_CHANGE:
//  445           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  446           break;
//  447 
//  448         case ZDO_STATE_CHANGE:
//  449           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  450 
//  451           // now on the network
//  452           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  453                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  454                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  455           {
//  456             giLightScreenMode = LIGHT_MAINMODE;
//  457             zclSampleLight_LcdDisplayUpdate();
//  458 #ifdef ZCL_EZMODE
//  459             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  460 #endif // ZCL_EZMODE
//  461           }
//  462           break;
//  463 
//  464         default:
//  465           break;
//  466       }
//  467 
//  468       // Release the memory
//  469       osal_msg_deallocate( (uint8 *)MSGpkt );
//  470     }
//  471 
//  472     // return unprocessed events
//  473     return (events ^ SYS_EVENT_MSG);
//  474   }
//  475 
//  476   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  477   {
//  478     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_event_loop_2
//  479       zclSampleLight_IdentifyTime--;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  480     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  481 
//  482     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
//  483   }
??zclSampleLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_5:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zclSampleLight_event_loop_7 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_4
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_10
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_11
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_11
        INC     R0
        SJMP    ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_10:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclSampleLight_event_loop_12
??zclSampleLight_event_loop_13:
        INC     R0
??zclSampleLight_event_loop_12:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_13
??zclSampleLight_event_loop_11:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_9:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclSampleLight_event_loop_6
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_event_loop_14
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
        SJMP    ??zclSampleLight_event_loop_15
??zclSampleLight_event_loop_14:
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
??zclSampleLight_event_loop_15:
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??zclSampleLight_event_loop_16
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V2,#zclSampleLight_OnOff & 0xff
        MOV     ?V3,#(zclSampleLight_OnOff >> 8) & 0xff
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V2,#0x1
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
??zclSampleLight_event_loop_16:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_17
//  484 
//  485   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_1:
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_18
//  486   {
//  487     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  488     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  489 
//  490     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x10
??zclSampleLight_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_17:
        MOV     R3,A
        SJMP    ??zclSampleLight_event_loop_19
//  491   }
//  492 
//  493 #ifdef ZCL_EZMODE
//  494 #if (defined HAL_BOARD_ZLIGHT)
//  495   // event to start EZMode on startup with a delay
//  496   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  497   {
//  498     // Invoke EZ-Mode
//  499     zclEZMode_InvokeData_t ezModeData;
//  500 
//  501     // Invoke EZ-Mode
//  502     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  503     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  504          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  505          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  506     {
//  507       ezModeData.onNetwork = TRUE;      // node is already on the network
//  508     }
//  509     else
//  510     {
//  511       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  512     }
//  513     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  514     ezModeData.numActiveOutClusters = 0;
//  515     ezModeData.pActiveOutClusterIDs = NULL;
//  516     ezModeData.numActiveInClusters = 0;
//  517     ezModeData.pActiveOutClusterIDs = NULL;
//  518     zcl_InvokeEZMode( &ezModeData );
//  519 
//  520     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  521   }
//  522 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  523 
//  524   // going on to next state
//  525   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
//  526   {
//  527     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
//  528     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
//  529   }
//  530 
//  531   // the overall EZMode timer expired, so we timed out
//  532   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
//  533   {
//  534     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
//  535     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
//  536   }
//  537 #endif // ZLC_EZMODE
//  538 
//  539 #ifdef ZCL_LEVEL_CTRL
//  540   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  541   {
//  542     zclSampleLight_AdjustLightLevel();
//  543     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  544   }
//  545 #endif
//  546 
//  547   // Discard unknown events
//  548   return 0;
??zclSampleLight_event_loop_18:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclSampleLight_event_loop_19:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  549 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond4) CFA_SP SP+-7
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_2
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclSampleLight_OnOffCB
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclSampleLight_event_loop
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclSampleLight_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  550 
//  551 /*********************************************************************
//  552  * @fn      zclSampleLight_HandleKeys
//  553  *
//  554  * @brief   Handles all key events for this device.
//  555  *
//  556  * @param   shift - true if in shift/alt.
//  557  * @param   keys - bit field for key events. Valid entries:
//  558  *                 HAL_KEY_SW_5
//  559  *                 HAL_KEY_SW_4
//  560  *                 HAL_KEY_SW_2
//  561  *                 HAL_KEY_SW_1
//  562  *
//  563  * @return  none
//  564  */
//  565 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  566 {
//  567   /*
//  568   if ( keys & HAL_KEY_SW_1 )
//  569   {
//  570     giLightScreenMode = LIGHT_MAINMODE;
//  571 
//  572     // toggle local light immediately
//  573     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
//  574 #ifdef ZCL_LEVEL_CTRL
//  575     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  576 #endif
//  577   }
//  578 
//  579   if ( keys & HAL_KEY_SW_2 )
//  580   {
//  581 #if (defined HAL_BOARD_ZLIGHT)
//  582 
//  583     zclSampleLight_BasicResetCB();
//  584 
//  585 #else
//  586 
//  587     giLightScreenMode = LIGHT_MAINMODE;
//  588 
//  589 #ifdef ZCL_EZMODE
//  590     {
//  591       // Invoke EZ-Mode
//  592       zclEZMode_InvokeData_t ezModeData;
//  593 
//  594       // Invoke EZ-Mode
//  595       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  596       if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  597           (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  598             (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  599       {
//  600         ezModeData.onNetwork = TRUE;      // node is already on the network
//  601       }
//  602       else
//  603       {
//  604         ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  605       }
//  606       ezModeData.initiator = FALSE;          // OnOffLight is a target
//  607       ezModeData.numActiveOutClusters = 0;
//  608       ezModeData.pActiveOutClusterIDs = NULL;
//  609       ezModeData.numActiveInClusters = 0;
//  610       ezModeData.pActiveOutClusterIDs = NULL;
//  611       zcl_InvokeEZMode( &ezModeData );
//  612     }
//  613 
//  614 #else // NOT EZ-Mode
//  615     {
//  616       zAddrType_t dstAddr;
//  617       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  618 
//  619       // Initiate an End Device Bind Request, this bind request will
//  620       // only use a cluster list that is important to binding.
//  621       dstAddr.addrMode = afAddr16Bit;
//  622       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  623       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  624                            SAMPLELIGHT_ENDPOINT,
//  625                            ZCL_HA_PROFILE_ID,
//  626                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  627                            0, NULL,   // No Outgoing clusters to bind
//  628                            TRUE );
//  629     }
//  630 #endif // ZCL_EZMODE
//  631 #endif // HAL_BOARD_ZLIGHT
//  632   }
//  633 
//  634   if ( keys & HAL_KEY_SW_3 )
//  635   {
//  636     NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
//  637                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
//  638   }
//  639 
//  640   if ( keys & HAL_KEY_SW_4 )
//  641   {
//  642     giLightScreenMode = LIGHT_MAINMODE;
//  643 
//  644     if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
//  645           ( zclSampleLight_NwkState == DEV_ROUTER ) )
//  646     {
//  647       zAddrType_t tmpAddr;
//  648 
//  649       tmpAddr.addrMode = Addr16Bit;
//  650       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
//  651 
//  652       // toggle permit join
//  653       gPermitDuration = gPermitDuration ? 0 : 0xff;
//  654 
//  655       // Trust Center significance is always true
//  656       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
//  657     }
//  658   }
//  659 
//  660   // Shift F5 does a Basic Reset (factory defaults)
//  661   if ( shift && ( keys & HAL_KEY_SW_5 ) )
//  662   {
//  663     zclSampleLight_BasicResetCB();
//  664   }
//  665   else if ( keys & HAL_KEY_SW_5 )
//  666   {
//  667     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
//  668   }
//  669   
//  670   // update the display, including the light
//  671   zclSampleLight_LcdDisplayUpdate();
//  672   */
//  673   
//  674   if ( keys & HAL_KEY_SW_6 )
//  675   {
//  676     // toggle local light immediately
//  677     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
//  678     if(zclSampleLight_OnOff==LIGHT_ON)
//  679     {
//  680       //HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //turn on led1- muc tich cuc am
//  681       HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //relay on
//  682     }
//  683     else 
//  684     {
//  685       //HalLedSet(HAL_LED_1, HAL_LED_MODE_ON );  //turn off led1
//  686       HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //relay off
//  687     }
//  688     
//  689     //update light state into NV memory
//  690     if (osal_nv_item_len(ZCD_NV_LIGHT_STATE))
//  691     {
//  692       osal_nv_write(ZCD_NV_LIGHT_STATE, 0, 1, &zclSampleLight_OnOff);
//  693     }
//  694 
//  695     /*
//  696     zclReportCmd_t rptcmd; 
//  697     rptcmd.numAttr = 1;
//  698     rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
//  699     rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
//  700     rptcmd.attrList[0].attrData = (uint8*)&zclSampleLight_OnOff;
//  701 
//  702     // Set destination address to indirect
//  703     zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  704     zclSampleLight_DstAddr.addr.shortAddr = 0;
//  705     zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, false, 0 );
//  706     //end update
//  707     */
//  708     
//  709      // enable permit joining on all routers
//  710     zAddrType_t dstAddr;
//  711     dstAddr.addrMode = AddrBroadcast;
//  712     dstAddr.addr.shortAddr = 0xffff;          
//  713     ZDP_MgmtPermitJoinReq(&dstAddr, 0xFF, TRUE, FALSE);
//  714   }
//  715 }
//  716 
//  717 /*********************************************************************
//  718  * @fn      zclSampleLight_LcdDisplayUpdate
//  719  *
//  720  * @brief   Called to update the LCD display.
//  721  *
//  722  * @param   none
//  723  *
//  724  * @return  none
//  725  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  726 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  727 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  728 #ifdef LCD_SUPPORTED
//  729   if ( giLightScreenMode == LIGHT_HELPMODE )
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_0
//  730   {
//  731     zclSampleLight_LcdDisplayHelpMode();
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#sSwLight & 0xff
        MOV     R3,#(sSwLight >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#sSwEZMode & 0xff
        MOV     R3,#(sSwEZMode >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        SJMP    ??zclSampleLight_LcdDisplayUpdate_1
//  732   }
//  733   else
//  734   {
//  735     zclSampleLight_LcdDisplayMainMode();
??zclSampleLight_LcdDisplayUpdate_0:
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??zclSampleLight_LcdDisplayUpdate_2
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x0
        SJMP    ??zclSampleLight_LcdDisplayUpdate_3
??zclSampleLight_LcdDisplayUpdate_2:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleLight_LcdDisplayUpdate_4
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x1
        SJMP    ??zclSampleLight_LcdDisplayUpdate_3
??zclSampleLight_LcdDisplayUpdate_4:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_LcdDisplayUpdate_5
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x2
??zclSampleLight_LcdDisplayUpdate_3:
        LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
??zclSampleLight_LcdDisplayUpdate_5:
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        MOV     DPTR,#sSwHelp + 15
        JZ      ??zclSampleLight_LcdDisplayUpdate_6
        MOV     A,#0x2a
        SJMP    ??zclSampleLight_LcdDisplayUpdate_7
??zclSampleLight_LcdDisplayUpdate_6:
        MOV     A,#0x20
??zclSampleLight_LcdDisplayUpdate_7:
        MOVX    @DPTR,A
??zclSampleLight_LcdDisplayUpdate_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sSwHelp & 0xff
        MOV     R3,#(sSwHelp >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  736   }
//  737 #endif
//  738 
//  739   zclSampleLight_DisplayLight();
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_LcdDisplayUpdate_8
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        MOV     R1,#0x2
        JZ      ??zclSampleLight_LcdDisplayUpdate_9
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#sLightOn & 0xff
        MOV     R3,#(sLightOn >> 8) & 0xff
        SJMP    ??zclSampleLight_LcdDisplayUpdate_10
??zclSampleLight_LcdDisplayUpdate_9:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#sLightOff & 0xff
        MOV     R3,#(sLightOff >> 8) & 0xff
??zclSampleLight_LcdDisplayUpdate_10:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  740 }
??zclSampleLight_LcdDisplayUpdate_8:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock14
//  741 
//  742 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  743 /*********************************************************************
//  744  * @fn      zclSampleLight_UpdateLampLevel
//  745  *
//  746  * @brief   Update lamp level output with gamma compensation
//  747  *
//  748  * @param   level
//  749  *
//  750  * @return  none
//  751  */
//  752 void zclSampleLight_UpdateLampLevel( uint8 level )
//  753 
//  754 {
//  755   uint16 gammaCorrectedLevel;
//  756 
//  757   // gamma correct the level
//  758   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  759 
//  760   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  761 }
//  762 #endif
//  763 
//  764 /*********************************************************************
//  765  * @fn      zclSampleLight_DisplayLight
//  766  *
//  767  * @brief   Displays current state of light on LED and also on main display if supported.
//  768  *
//  769  * @param   none
//  770  *
//  771  * @return  none
//  772  */
//  773 static void zclSampleLight_DisplayLight( void )
//  774 {
//  775 //  // set the LED1 based on light (on or off)
//  776 //  if ( zclSampleLight_OnOff == LIGHT_ON )
//  777 //  {
//  778 //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  779 //  }
//  780 //  else
//  781 //  {
//  782 //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  783 //  }
//  784 
//  785 #ifdef LCD_SUPPORTED
//  786   if (giLightScreenMode == LIGHT_MAINMODE)
//  787   {
//  788 #ifdef ZCL_LEVEL_CTRL
//  789     // display current light level
//  790     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  791          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  792     {
//  793       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  794     }
//  795     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  796               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  797                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  798                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  799     {
//  800       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  801     }
//  802     else    // "    LEVEL ###"
//  803     {
//  804       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  805       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  806     }
//  807 #else
//  808     if ( zclSampleLight_OnOff )
//  809     {
//  810       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  811     }
//  812     else
//  813     {
//  814       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  815     }
//  816 #endif // ZCL_LEVEL_CTRL
//  817   }
//  818 #endif // LCD_SUPPORTED
//  819 }
//  820 
//  821 #ifdef LCD_SUPPORTED
//  822 /*********************************************************************
//  823  * @fn      zclSampleLight_LcdDisplayMainMode
//  824  *
//  825  * @brief   Called to display the main screen on the LCD.
//  826  *
//  827  * @param   none
//  828  *
//  829  * @return  none
//  830  */
//  831 static void zclSampleLight_LcdDisplayMainMode( void )
//  832 {
//  833   // display line 1 to indicate NWK status
//  834   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
//  835   {
//  836     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  837   }
//  838   else if ( zclSampleLight_NwkState == DEV_ROUTER )
//  839   {
//  840     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  841   }
//  842   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
//  843   {
//  844     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  845   }
//  846 
//  847   // end of line 3 displays permit join status (*)
//  848   if ( gPermitDuration )
//  849   {
//  850     sSwHelp[15] = '*';
//  851   }
//  852   else
//  853   {
//  854     sSwHelp[15] = ' ';
//  855   }
//  856   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  857 }
//  858 
//  859 /*********************************************************************
//  860  * @fn      zclSampleLight_LcdDisplayHelpMode
//  861  *
//  862  * @brief   Called to display the SW options on the LCD.
//  863  *
//  864  * @param   none
//  865  *
//  866  * @return  none
//  867  */
//  868 static void zclSampleLight_LcdDisplayHelpMode( void )
//  869 {
//  870   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
//  871   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
//  872   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  873 }
//  874 #endif  // LCD_SUPPORTED
//  875 
//  876 /*********************************************************************
//  877  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  878  *
//  879  * @brief   Called to process any change to the IdentifyTime attribute.
//  880  *
//  881  * @param   none
//  882  *
//  883  * @return  none
//  884  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  885 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  886 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  887   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
//  888   {
//  889     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  890     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
//  891   }
//  892   else
//  893   {
//  894 #ifdef ZCL_EZMODE
//  895     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
//  896     {
//  897       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
//  898     }
//  899     else
//  900     {
//  901       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  902     }
//  903 #endif
//  904 
//  905     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
??zclSampleLight_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  906   }
//  907 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock15
//  908 
//  909 /*********************************************************************
//  910  * @fn      zclSampleLight_BasicResetCB
//  911  *
//  912  * @brief   Callback from the ZCL General Cluster Library
//  913  *          to set all the Basic Cluster attributes to default values.
//  914  *
//  915  * @param   none
//  916  *
//  917  * @return  none
//  918  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  919 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  920 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  921   NLME_LeaveReq_t leaveReq;
//  922   // Set every field to 0
//  923   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  924 
//  925   // This will enable the device to rejoin the network after reset.
//  926   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  927 
//  928   // Set the NV startup option to force a "new" join.
//  929   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  930 
//  931   // Leave the network, and reset afterwards
//  932   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclSampleLight_BasicResetCB_0
//  933   {
//  934     // Couldn't send out leave; prepare to reset anyway
//  935     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  936   }
//  937 }
??zclSampleLight_BasicResetCB_0:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock17
//  938 
//  939 /*********************************************************************
//  940  * @fn      zclSampleLight_IdentifyCB
//  941  *
//  942  * @brief   Callback from the ZCL General Cluster Library when
//  943  *          it received an Identity Command for this application.
//  944  *
//  945  * @param   srcAddr - source address and endpoint of the response message
//  946  * @param   identifyTime - the number of seconds to identify yourself
//  947  *
//  948  * @return  none
//  949  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  950 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  951 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  952   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  953   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  954 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock18
//  955 
//  956 /*********************************************************************
//  957  * @fn      zclSampleLight_IdentifyQueryRspCB
//  958  *
//  959  * @brief   Callback from the ZCL General Cluster Library when
//  960  *          it received an Identity Query Response Command for this application.
//  961  *
//  962  * @param   srcAddr - requestor's address
//  963  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  964  *
//  965  * @return  none
//  966  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  967 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  968 {
        ; Saved register size: 0
        ; Auto size: 0
//  969   (void)pRsp;
//  970 #ifdef ZCL_EZMODE
//  971   {
//  972     zclEZMode_ActionData_t data;
//  973     data.pIdentifyQueryRsp = pRsp;
//  974     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  975   }
//  976 #endif
//  977 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
//  978 
//  979 /*********************************************************************
//  980  * @fn      zclSampleLight_OnOffCB
//  981  *
//  982  * @brief   Callback from the ZCL General Cluster Library when
//  983  *          it received an On/Off Command for this application.
//  984  *
//  985  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  986  *
//  987  * @return  none
//  988  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  989 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  990 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  991   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  992 
//  993   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  994 
//  995 
//  996   // Turn on the light
//  997   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_0
//  998   {
//  999     zclSampleLight_OnOff = LIGHT_ON;
        MOV     DPTR,#zclSampleLight_OnOff
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1000     //HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //turn on led1- muc tich cuc am
// 1001     HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //turn on relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        SJMP    ??zclSampleLight_OnOffCB_1
// 1002   }
// 1003   // Turn off the light
// 1004   else if ( cmd == COMMAND_OFF )
??zclSampleLight_OnOffCB_0:
        MOV     A,R6
        JNZ     ??zclSampleLight_OnOffCB_2
// 1005   {
// 1006     zclSampleLight_OnOff = LIGHT_OFF;
        MOV     DPTR,#zclSampleLight_OnOff
        CLR     A
        MOVX    @DPTR,A
// 1007     //HalLedSet(HAL_LED_1, HAL_LED_MODE_ON ); //turn off led1
// 1008     HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF ); //turn off relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
??zclSampleLight_OnOffCB_1:
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        SJMP    ??zclSampleLight_OnOffCB_3
// 1009   }
// 1010   // Toggle the light
// 1011   else if ( cmd == COMMAND_TOGGLE )
??zclSampleLight_OnOffCB_2:
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_3
// 1012   {
// 1013     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_4
// 1014     {
// 1015       zclSampleLight_OnOff = LIGHT_ON;
        MOV     A,#0x1
        SJMP    ??zclSampleLight_OnOffCB_5
// 1016     }
// 1017     else
// 1018     {
// 1019       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_4:
        CLR     A
??zclSampleLight_OnOffCB_5:
        MOVX    @DPTR,A
// 1020     }
// 1021   }
// 1022   
// 1023   //update light state into NV memory
// 1024   if (osal_nv_item_len(ZCD_NV_LIGHT_STATE))
??zclSampleLight_OnOffCB_3:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleLight_OnOffCB_6
// 1025   {
// 1026     osal_nv_write(ZCD_NV_LIGHT_STATE, 0, 1, &zclSampleLight_OnOff);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#zclSampleLight_OnOff & 0xff
        MOV     ?V1,#(zclSampleLight_OnOff >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1027   }
// 1028   
// 1029 #if ZCL_LEVEL_CTRL
// 1030   zclSampleLight_DefaultMove( );
// 1031 #endif
// 1032   
// 1033 //  //upate 9/12/2016
// 1034 //  zclReportCmd_t rptcmd; 
// 1035 //  rptcmd.numAttr = 1;
// 1036 //  rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
// 1037 //  rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
// 1038 //  rptcmd.attrList[0].attrData = (uint8*)&zclSampleLight_OnOff;
// 1039 //
// 1040 //  // Set destination address to indirect
// 1041 //  zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
// 1042 //  zclSampleLight_DstAddr.addr.shortAddr = 0;
// 1043 //  zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_SERVER_CLIENT_DIR, false, 0 );
// 1044 //  //end update
// 1045   
// 1046   // update the display
// 1047   //zclSampleLight_LcdDisplayUpdate( );
// 1048 }
??zclSampleLight_OnOffCB_6:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sSwHelp>`:
        DB "SW5: Help       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        END
// 1049 
// 1050 #ifdef ZCL_LEVEL_CTRL
// 1051 /*********************************************************************
// 1052  * @fn      zclSampleLight_TimeRateHelper
// 1053  *
// 1054  * @brief   Calculate time based on rate, and startup level state machine
// 1055  *
// 1056  * @param   newLevel - new level for current level
// 1057  *
// 1058  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
// 1059  */
// 1060 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
// 1061 {
// 1062   uint32 diff;
// 1063   uint32 newLevel32;
// 1064 
// 1065   // remember current and new level
// 1066   zclSampleLight_NewLevel = newLevel;
// 1067   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
// 1068 
// 1069   // calculate diff
// 1070   newLevel32 = (uint32)1000 * newLevel;
// 1071   if ( zclSampleLight_LevelCurrentLevel > newLevel )
// 1072   {
// 1073     diff = zclSampleLight_CurrentLevel32 - newLevel32;
// 1074     zclSampleLight_NewLevelUp = FALSE;  // moving down
// 1075   }
// 1076   else
// 1077   {
// 1078     diff = newLevel32 - zclSampleLight_CurrentLevel32;
// 1079     zclSampleLight_NewLevelUp = TRUE;   // moving up
// 1080   }
// 1081 
// 1082   return ( diff );
// 1083 }
// 1084 
// 1085 /*********************************************************************
// 1086  * @fn      zclSampleLight_MoveBasedOnRate
// 1087  *
// 1088  * @brief   Calculate time based on rate, and startup level state machine
// 1089  *
// 1090  * @param   newLevel - new level for current level
// 1091  * @param   rate16   - fixed point rate (e.g. 16.123)
// 1092  *
// 1093  * @return  none
// 1094  */
// 1095 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
// 1096 {
// 1097   uint32 diff;
// 1098 
// 1099   // determine how much time (in 10ths of seconds) based on the difference and rate
// 1100   zclSampleLight_Rate32 = rate;
// 1101   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1102   zclSampleLight_LevelRemainingTime = diff / rate;
// 1103   if ( !zclSampleLight_LevelRemainingTime )
// 1104   {
// 1105     zclSampleLight_LevelRemainingTime = 1;
// 1106   }
// 1107 
// 1108   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1109 }
// 1110 
// 1111 /*********************************************************************
// 1112  * @fn      zclSampleLight_MoveBasedOnTime
// 1113  *
// 1114  * @brief   Calculate rate based on time, and startup level state machine
// 1115  *
// 1116  * @param   newLevel  - new level for current level
// 1117  * @param   time      - in 10ths of seconds
// 1118  *
// 1119  * @return  none
// 1120  */
// 1121 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
// 1122 {
// 1123   uint16 diff;
// 1124 
// 1125   // determine rate (in units) based on difference and time
// 1126   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1127   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
// 1128   zclSampleLight_Rate32 = diff / time;
// 1129 
// 1130   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1131 }
// 1132 
// 1133 /*********************************************************************
// 1134  * @fn      zclSampleLight_GetTime
// 1135  *
// 1136  * @brief   Determine amount of time that MoveXXX will take to complete.
// 1137  *
// 1138  * @param   level = new level to move to
// 1139  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
// 1140  *
// 1141  * @return  none
// 1142  */
// 1143 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
// 1144 {
// 1145   // there is a hiearchy of the amount of time to use for transistioning
// 1146   // check each one in turn. If none of defaults are set, then use fastest
// 1147   // time possible.
// 1148   if ( time == 0xFFFF )
// 1149   {
// 1150     // use On or Off Transition Time if set (not 0xffff)
// 1151     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1152     {
// 1153       time = zclSampleLight_LevelOffTransitionTime;
// 1154     }
// 1155     else
// 1156     {
// 1157       time = zclSampleLight_LevelOnTransitionTime;
// 1158     }
// 1159 
// 1160     // else use OnOffTransitionTime if set (not 0xffff)
// 1161     if ( time == 0xFFFF )
// 1162     {
// 1163       time = zclSampleLight_LevelOnOffTransitionTime;
// 1164     }
// 1165 
// 1166     // else as fast as possible
// 1167     if ( time == 0xFFFF )
// 1168     {
// 1169       time = 1;
// 1170     }
// 1171   }
// 1172 
// 1173   if ( !time )
// 1174   {
// 1175     time = 1; // as fast as possible
// 1176   }
// 1177 
// 1178   return ( time );
// 1179 }
// 1180 
// 1181 /*********************************************************************
// 1182  * @fn      zclSampleLight_DefaultMove
// 1183  *
// 1184  * @brief   We were turned on/off. Use default time to move to on or off.
// 1185  *
// 1186  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1187  *
// 1188  * @return  none
// 1189  */
// 1190 static void zclSampleLight_DefaultMove( void )
// 1191 {
// 1192   uint8  newLevel;
// 1193   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1194   uint16 time;
// 1195 
// 1196   // if moving to on position, move to on level
// 1197   if ( zclSampleLight_OnOff )
// 1198   {
// 1199     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1200     {
// 1201       // The last Level (before going OFF) should be used)
// 1202       newLevel = zclSampleLight_LevelLastLevel;
// 1203     }
// 1204     else
// 1205     {
// 1206       newLevel = zclSampleLight_LevelOnLevel;
// 1207     }
// 1208 
// 1209     time = zclSampleLight_LevelOnTransitionTime;
// 1210   }
// 1211   else
// 1212   {
// 1213     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1214 
// 1215     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1216     {
// 1217       // Save the current Level before going OFF to use it when the light turns ON
// 1218       // it should be back to this level
// 1219       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1220     }
// 1221 
// 1222     time = zclSampleLight_LevelOffTransitionTime;
// 1223   }
// 1224 
// 1225   // else use OnOffTransitionTime if set (not 0xffff)
// 1226   if ( time == 0xFFFF )
// 1227   {
// 1228     time = zclSampleLight_LevelOnOffTransitionTime;
// 1229   }
// 1230 
// 1231   // else as fast as possible
// 1232   if ( time == 0xFFFF )
// 1233   {
// 1234     time = 1;
// 1235   }
// 1236 
// 1237   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1238   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1239 
// 1240   // start up state machine.
// 1241   zclSampleLight_WithOnOff = TRUE;
// 1242   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1243 }
// 1244 
// 1245 /*********************************************************************
// 1246  * @fn      zclSampleLight_AdjustLightLevel
// 1247  *
// 1248  * @brief   Called each 10th of a second while state machine running
// 1249  *
// 1250  * @param   none
// 1251  *
// 1252  * @return  none
// 1253  */
// 1254 static void zclSampleLight_AdjustLightLevel( void )
// 1255 {
// 1256   // one tick (10th of a second) less
// 1257   if ( zclSampleLight_LevelRemainingTime )
// 1258   {
// 1259     --zclSampleLight_LevelRemainingTime;
// 1260   }
// 1261 
// 1262   // no time left, done
// 1263   if ( zclSampleLight_LevelRemainingTime == 0)
// 1264   {
// 1265     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1266   }
// 1267 
// 1268   // still time left, keep increment/decrementing
// 1269   else
// 1270   {
// 1271     if ( zclSampleLight_NewLevelUp )
// 1272     {
// 1273       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1274     }
// 1275     else
// 1276     {
// 1277       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1278     }
// 1279     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1280   }
// 1281 
// 1282 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1283   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1284 #endif
// 1285 
// 1286   // also affect on/off
// 1287   if ( zclSampleLight_WithOnOff )
// 1288   {
// 1289     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1290     {
// 1291       zclSampleLight_OnOff = LIGHT_ON;
// 1292 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1293       ENABLE_LAMP;
// 1294 #endif
// 1295     }
// 1296     else
// 1297     {
// 1298       zclSampleLight_OnOff = LIGHT_OFF;
// 1299 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1300       DISABLE_LAMP;
// 1301 #endif
// 1302     }
// 1303   }
// 1304 
// 1305   // display light level as we go
// 1306   zclSampleLight_DisplayLight( );
// 1307 
// 1308   // keep ticking away
// 1309   if ( zclSampleLight_LevelRemainingTime )
// 1310   {
// 1311     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1312   }
// 1313 }
// 1314 
// 1315 /*********************************************************************
// 1316  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1317  *
// 1318  * @brief   Callback from the ZCL General Cluster Library when
// 1319  *          it received a LevelControlMoveToLevel Command for this application.
// 1320  *
// 1321  * @param   pCmd - ZigBee command parameters
// 1322  *
// 1323  * @return  none
// 1324  */
// 1325 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1326 {
// 1327   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1328   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1329 }
// 1330 
// 1331 /*********************************************************************
// 1332  * @fn      zclSampleLight_LevelControlMoveCB
// 1333  *
// 1334  * @brief   Callback from the ZCL General Cluster Library when
// 1335  *          it received a LevelControlMove Command for this application.
// 1336  *
// 1337  * @param   pCmd - ZigBee command parameters
// 1338  *
// 1339  * @return  none
// 1340  */
// 1341 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1342 {
// 1343   uint8 newLevel;
// 1344   uint32 rate;
// 1345 
// 1346   // convert rate from units per second to units per tick (10ths of seconds)
// 1347   // and move at that right up or down
// 1348   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1349 
// 1350   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1351   {
// 1352     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1353   }
// 1354   else
// 1355   {
// 1356     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1357   }
// 1358 
// 1359   rate = (uint32)100 * pCmd->rate;
// 1360   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1361 }
// 1362 
// 1363 /*********************************************************************
// 1364  * @fn      zclSampleLight_LevelControlStepCB
// 1365  *
// 1366  * @brief   Callback from the ZCL General Cluster Library when
// 1367  *          it received an On/Off Command for this application.
// 1368  *
// 1369  * @param   pCmd - ZigBee command parameters
// 1370  *
// 1371  * @return  none
// 1372  */
// 1373 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1374 {
// 1375   uint8 newLevel;
// 1376 
// 1377   // determine new level, but don't exceed boundaries
// 1378   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1379   {
// 1380     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1381     {
// 1382       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1383     }
// 1384     else
// 1385     {
// 1386       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1387     }
// 1388   }
// 1389   else
// 1390   {
// 1391     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1392     {
// 1393       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1394     }
// 1395     else
// 1396     {
// 1397       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1398     }
// 1399   }
// 1400 
// 1401   // move to the new level
// 1402   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1403   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1404 }
// 1405 
// 1406 /*********************************************************************
// 1407  * @fn      zclSampleLight_LevelControlStopCB
// 1408  *
// 1409  * @brief   Callback from the ZCL General Cluster Library when
// 1410  *          it received an Level Control Stop Command for this application.
// 1411  *
// 1412  * @param   pCmd - ZigBee command parameters
// 1413  *
// 1414  * @return  none
// 1415  */
// 1416 static void zclSampleLight_LevelControlStopCB( void )
// 1417 {
// 1418   // stop immediately
// 1419   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1420   zclSampleLight_LevelRemainingTime = 0;
// 1421 }
// 1422 #endif
// 1423 
// 1424 /******************************************************************************
// 1425  *
// 1426  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1427  *
// 1428  *****************************************************************************/
// 1429 
// 1430 /*********************************************************************
// 1431  * @fn      zclSampleLight_ProcessIncomingMsg
// 1432  *
// 1433  * @brief   Process ZCL Foundation incoming message
// 1434  *
// 1435  * @param   pInMsg - pointer to the received message
// 1436  *
// 1437  * @return  none
// 1438  */
// 1439 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1440 {
// 1441   switch ( pInMsg->zclHdr.commandID )
// 1442   {
// 1443 #ifdef ZCL_READ
// 1444     case ZCL_CMD_READ_RSP:
// 1445       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1446       break;
// 1447 #endif
// 1448 #ifdef ZCL_WRITE
// 1449     case ZCL_CMD_WRITE_RSP:
// 1450       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1451       break;
// 1452 #endif
// 1453 #ifdef ZCL_REPORT
// 1454     // Attribute Reporting implementation should be added here
// 1455     case ZCL_CMD_CONFIG_REPORT:
// 1456       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1457       break;
// 1458 
// 1459     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1460       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1461       break;
// 1462 
// 1463     case ZCL_CMD_READ_REPORT_CFG:
// 1464       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1465       break;
// 1466 
// 1467     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1468       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1469       break;
// 1470 
// 1471     case ZCL_CMD_REPORT:
// 1472       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1473       break;
// 1474 #endif
// 1475     case ZCL_CMD_DEFAULT_RSP:
// 1476       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1477       break;
// 1478 #ifdef ZCL_DISCOVER
// 1479     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1480       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1481       break;
// 1482 
// 1483     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1484       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1485       break;
// 1486 
// 1487     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1488       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1489       break;
// 1490 
// 1491     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1492       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1493       break;
// 1494 #endif
// 1495     default:
// 1496       break;
// 1497   }
// 1498 
// 1499   if ( pInMsg->attrCmd )
// 1500     osal_mem_free( pInMsg->attrCmd );
// 1501 }
// 1502 
// 1503 #ifdef ZCL_READ
// 1504 /*********************************************************************
// 1505  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1506  *
// 1507  * @brief   Process the "Profile" Read Response Command
// 1508  *
// 1509  * @param   pInMsg - incoming message to process
// 1510  *
// 1511  * @return  none
// 1512  */
// 1513 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1514 {
// 1515   zclReadRspCmd_t *readRspCmd;
// 1516   uint8 i;
// 1517 
// 1518   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1519   for (i = 0; i < readRspCmd->numAttr; i++)
// 1520   {
// 1521     // Notify the originator of the results of the original read attributes
// 1522     // attempt and, for each successfull request, the value of the requested
// 1523     // attribute
// 1524   }
// 1525 
// 1526   return ( TRUE );
// 1527 }
// 1528 #endif // ZCL_READ
// 1529 
// 1530 #ifdef ZCL_WRITE
// 1531 /*********************************************************************
// 1532  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1533  *
// 1534  * @brief   Process the "Profile" Write Response Command
// 1535  *
// 1536  * @param   pInMsg - incoming message to process
// 1537  *
// 1538  * @return  none
// 1539  */
// 1540 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1541 {
// 1542   zclWriteRspCmd_t *writeRspCmd;
// 1543   uint8 i;
// 1544 
// 1545   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1546   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1547   {
// 1548     // Notify the device of the results of the its original write attributes
// 1549     // command.
// 1550   }
// 1551 
// 1552   return ( TRUE );
// 1553 }
// 1554 #endif // ZCL_WRITE
// 1555 
// 1556 /*********************************************************************
// 1557  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1558  *
// 1559  * @brief   Process the "Profile" Default Response Command
// 1560  *
// 1561  * @param   pInMsg - incoming message to process
// 1562  *
// 1563  * @return  none
// 1564  */
// 1565 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1566 {
// 1567   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1568 
// 1569   // Device is notified of the Default Response command.
// 1570   (void)pInMsg;
// 1571 
// 1572   return ( TRUE );
// 1573 }
// 1574 
// 1575 #ifdef ZCL_DISCOVER
// 1576 /*********************************************************************
// 1577  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1578  *
// 1579  * @brief   Process the Discover Commands Response Command
// 1580  *
// 1581  * @param   pInMsg - incoming message to process
// 1582  *
// 1583  * @return  none
// 1584  */
// 1585 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1586 {
// 1587   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1588   uint8 i;
// 1589 
// 1590   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1591   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1592   {
// 1593     // Device is notified of the result of its attribute discovery command.
// 1594   }
// 1595 
// 1596   return ( TRUE );
// 1597 }
// 1598 
// 1599 /*********************************************************************
// 1600  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1601  *
// 1602  * @brief   Process the "Profile" Discover Attributes Response Command
// 1603  *
// 1604  * @param   pInMsg - incoming message to process
// 1605  *
// 1606  * @return  none
// 1607  */
// 1608 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1609 {
// 1610   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1611   uint8 i;
// 1612 
// 1613   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1614   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1615   {
// 1616     // Device is notified of the result of its attribute discovery command.
// 1617   }
// 1618 
// 1619   return ( TRUE );
// 1620 }
// 1621 
// 1622 /*********************************************************************
// 1623  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1624  *
// 1625  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1626  *
// 1627  * @param   pInMsg - incoming message to process
// 1628  *
// 1629  * @return  none
// 1630  */
// 1631 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1632 {
// 1633   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1634   uint8 i;
// 1635 
// 1636   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1637   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1638   {
// 1639     // Device is notified of the result of its attribute discovery command.
// 1640   }
// 1641 
// 1642   return ( TRUE );
// 1643 }
// 1644 #endif // ZCL_DISCOVER
// 1645 
// 1646 #if ZCL_EZMODE
// 1647 /*********************************************************************
// 1648  * @fn      zclSampleLight_ProcessZDOMsgs
// 1649  *
// 1650  * @brief   Called when this node receives a ZDO/ZDP response.
// 1651  *
// 1652  * @param   none
// 1653  *
// 1654  * @return  status
// 1655  */
// 1656 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1657 {
// 1658   zclEZMode_ActionData_t data;
// 1659   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1660 
// 1661   // Let EZ-Mode know of the Simple Descriptor Response
// 1662   if ( pMsg->clusterID == Match_Desc_rsp )
// 1663   {
// 1664     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1665     data.pMatchDescRsp = pMatchDescRsp;
// 1666     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1667     osal_mem_free( pMatchDescRsp );
// 1668   }
// 1669 }
// 1670 
// 1671 /*********************************************************************
// 1672  * @fn      zclSampleLight_EZModeCB
// 1673  *
// 1674  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1675 *           going on during EZ-Mode steering/finding/binding.
// 1676  *
// 1677  * @param   state - an
// 1678  *
// 1679  * @return  none
// 1680  */
// 1681 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1682 {
// 1683 #ifdef LCD_SUPPORTED
// 1684   char *pStr;
// 1685   uint8 err;
// 1686 #endif
// 1687 
// 1688   // time to go into identify mode
// 1689   if ( state == EZMODE_STATE_IDENTIFYING )
// 1690   {
// 1691 #ifdef LCD_SUPPORTED
// 1692     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1693 #endif
// 1694 
// 1695     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1696     zclSampleLight_ProcessIdentifyTimeChange();
// 1697   }
// 1698 
// 1699   // autoclosing, show what happened (success, cancelled, etc...)
// 1700   if( state == EZMODE_STATE_AUTOCLOSE )
// 1701   {
// 1702 #ifdef LCD_SUPPORTED
// 1703     pStr = NULL;
// 1704     err = pData->sAutoClose.err;
// 1705     if ( err == EZMODE_ERR_SUCCESS )
// 1706     {
// 1707       pStr = "EZMode: Success";
// 1708     }
// 1709     else if ( err == EZMODE_ERR_NOMATCH )
// 1710     {
// 1711       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1712     }
// 1713     if ( pStr )
// 1714     {
// 1715       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1716       {
// 1717         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1718       }
// 1719     }
// 1720 #endif
// 1721   }
// 1722 
// 1723   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1724   if( state == EZMODE_STATE_FINISH )
// 1725   {
// 1726     // turn off identify mode
// 1727     zclSampleLight_IdentifyTime = 0;
// 1728     zclSampleLight_ProcessIdentifyTimeChange();
// 1729 
// 1730 #ifdef LCD_SUPPORTED
// 1731     // if successful, inform user which nwkaddr/ep we bound to
// 1732     pStr = NULL;
// 1733     err = pData->sFinish.err;
// 1734     if( err == EZMODE_ERR_SUCCESS )
// 1735     {
// 1736       // already stated on autoclose
// 1737     }
// 1738     else if ( err == EZMODE_ERR_CANCELLED )
// 1739     {
// 1740       pStr = "EZMode: Cancel";
// 1741     }
// 1742     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1743     {
// 1744       pStr = "EZMode: BadParm";
// 1745     }
// 1746     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1747     {
// 1748       pStr = "EZMode: TimeOut";
// 1749     }
// 1750     if ( pStr )
// 1751     {
// 1752       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1753       {
// 1754         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1755       }
// 1756     }
// 1757 #endif
// 1758     // show main UI screen 3 seconds after binding
// 1759     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1760   }
// 1761 }
// 1762 #endif // ZCL_EZMODE
// 1763 
// 1764 /****************************************************************************
// 1765 ****************************************************************************/
// 1766 
// 1767 
// 
// 983 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//  54 bytes in segment XDATA_I
//  54 bytes in segment XDATA_ID
//  79 bytes in segment XDATA_ROM_C
//  16 bytes in segment XDATA_Z
// 
// 1 085 bytes of CODE  memory
//    75 bytes of CONST memory (+ 4 bytes shared)
//    70 bytes of XDATA memory
//
//Errors: none
//Warnings: none
